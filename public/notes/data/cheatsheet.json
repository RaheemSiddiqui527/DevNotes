[
  {
  "title": "Git Essentials",
  "items": [
    { "label": "Set username", "code": "git config --global user.name \"Your Name\"", "desc": "Set global Git username." },
    { "label": "Set email", "code": "git config --global user.email \"you@example.com\"", "desc": "Set global Git email." },
    { "label": "List config", "code": "git config --list", "desc": "View all Git configurations." },

    { "label": "Init repo", "code": "git init", "desc": "Create a new Git repository." },
    { "label": "Clone repo", "code": "git clone <url>", "desc": "Clone remote repository." },
    { "label": "Check status", "code": "git status", "desc": "Show working directory status." },
    { "label": "Add file", "code": "git add <file>", "desc": "Stage a specific file." },
    { "label": "Add all", "code": "git add .", "desc": "Stage all changes." },
    { "label": "Commit", "code": "git commit -m \"message\"", "desc": "Commit staged changes." },
    { "label": "Amend commit", "code": "git commit --amend", "desc": "Edit last commit." },

    { "label": "List branches", "code": "git branch", "desc": "List all branches." },
    { "label": "New branch", "code": "git branch feature-x", "desc": "Create new branch." },
    { "label": "Switch branch", "code": "git checkout feature-x", "desc": "Switch to a branch." },
    { "label": "New + switch", "code": "git checkout -b feature-x", "desc": "Create and switch to branch." },
    { "label": "Switch (modern)", "code": "git switch feature-x", "desc": "Switch branch (new command)." },
    { "label": "Merge branch", "code": "git merge feature-x", "desc": "Merge branch into current branch." },
    { "label": "Rebase", "code": "git rebase main", "desc": "Reapply commits on top of another branch." },

    { "label": "Add remote", "code": "git remote add origin <url>", "desc": "Link remote repository." },
    { "label": "Show remotes", "code": "git remote -v", "desc": "View remote repos." },
    { "label": "Fetch remote", "code": "git fetch origin", "desc": "Download changes without merging." },
    { "label": "Pull remote", "code": "git pull origin main", "desc": "Fetch and merge from remote branch." },
    { "label": "Push branch", "code": "git push -u origin main", "desc": "Push commits and set upstream." },

    { "label": "Commit log", "code": "git log --oneline --graph", "desc": "Compact commit history with graph." },
    { "label": "Show commit", "code": "git show <commit>", "desc": "Show details of a commit." },
    { "label": "Diff unstaged", "code": "git diff", "desc": "See unstaged changes." },
    { "label": "Diff staged", "code": "git diff --staged", "desc": "See staged changes." },
    { "label": "Blame file", "code": "git blame <file>", "desc": "Show who changed each line." },

    { "label": "Discard changes", "code": "git restore <file>", "desc": "Restore file to last commit." },
    { "label": "Unstage file", "code": "git restore --staged <file>", "desc": "Remove file from staging area." },
    { "label": "Soft reset", "code": "git reset --soft HEAD~1", "desc": "Undo commit, keep changes staged." },
    { "label": "Mixed reset", "code": "git reset HEAD~1", "desc": "Undo commit, keep changes unstaged." },
    { "label": "Hard reset", "code": "git reset --hard HEAD~1", "desc": "Undo commit and discard changes." },
    { "label": "Revert commit", "code": "git revert <commit>", "desc": "Make new commit that undoes given commit." },

    { "label": "Stash save", "code": "git stash", "desc": "Save uncommitted changes temporarily." },
    { "label": "Stash list", "code": "git stash list", "desc": "Show saved stashes." },
    { "label": "Stash apply", "code": "git stash apply", "desc": "Apply latest stash." },
    { "label": "Stash pop", "code": "git stash pop", "desc": "Apply + drop latest stash." },

    { "label": "Create tag", "code": "git tag v1.0.0", "desc": "Create lightweight tag." },
    { "label": "Annotated tag", "code": "git tag -a v1.0.0 -m \"Release\"", "desc": "Create annotated tag." },
    { "label": "Push tag", "code": "git push origin v1.0.0", "desc": "Push tag to remote." },
    { "label": "All tags", "code": "git push origin --tags", "desc": "Push all tags to remote." },

    { "label": "Cherry pick", "code": "git cherry-pick <commit>", "desc": "Apply commit from another branch." },
    { "label": "Reflog", "code": "git reflog", "desc": "Show history of HEAD moves." },
    { "label": "Bisect", "code": "git bisect start", "desc": "Binary search to find buggy commit." },
    { "label": "Submodule add", "code": "git submodule add <url>", "desc": "Add a submodule." },
    { "label": "Submodule update", "code": "git submodule update --init --recursive", "desc": "Clone & init submodules." }
  ]
},
  {
  "title": "NPM / Yarn",
  "items": [
    { "label": "Init project (npm)", "code": "npm init -y", "desc": "Create a package.json with defaults." },
    { "label": "Init project (yarn)", "code": "yarn init -y", "desc": "Create a package.json with Yarn." },

    { "label": "Install dep (npm)", "code": "npm install <pkg>", "desc": "Install a package dependency." },
    { "label": "Install dep (yarn)", "code": "yarn add <pkg>", "desc": "Install a package dependency with Yarn." },

    { "label": "Install dev dep (npm)", "code": "npm install -D <pkg>", "desc": "Install a dev dependency." },
    { "label": "Install dev dep (yarn)", "code": "yarn add -D <pkg>", "desc": "Install a dev dependency with Yarn." },

    { "label": "Remove dep (npm)", "code": "npm uninstall <pkg>", "desc": "Remove a package dependency." },
    { "label": "Remove dep (yarn)", "code": "yarn remove <pkg>", "desc": "Remove a package dependency with Yarn." },

    { "label": "Update dep (npm)", "code": "npm update <pkg>", "desc": "Update a package to latest allowed version." },
    { "label": "Update dep (yarn)", "code": "yarn upgrade <pkg>", "desc": "Upgrade a package in Yarn." },

    { "label": "Update all (npm)", "code": "npm outdated && npm update", "desc": "Check and update outdated packages." },
    { "label": "Update all (yarn)", "code": "yarn upgrade --latest", "desc": "Upgrade all deps to latest." },

    { "label": "Install global (npm)", "code": "npm install -g <pkg>", "desc": "Install a package globally." },
    { "label": "Install global (yarn)", "code": "yarn global add <pkg>", "desc": "Install a package globally with Yarn." },

    { "label": "Remove global (npm)", "code": "npm uninstall -g <pkg>", "desc": "Uninstall a global package." },
    { "label": "Remove global (yarn)", "code": "yarn global remove <pkg>", "desc": "Remove a global Yarn package." },

    { "label": "Run script (npm)", "code": "npm run <script>", "desc": "Run a script from package.json." },
    { "label": "Run script (yarn)", "code": "yarn <script>", "desc": "Run a script (shorter syntax)." },

    { "label": "List deps (npm)", "code": "npm list --depth=0", "desc": "Show installed top-level packages." },
    { "label": "List deps (yarn)", "code": "yarn list --depth=0", "desc": "Show installed packages in Yarn." },

    { "label": "Install all deps (npm)", "code": "npm install", "desc": "Install all dependencies from package.json." },
    { "label": "Install all deps (yarn)", "code": "yarn install", "desc": "Install all dependencies from package.json." },

    { "label": "Clean cache (npm)", "code": "npm cache clean --force", "desc": "Clear npm cache." },
    { "label": "Clean cache (yarn)", "code": "yarn cache clean", "desc": "Clear Yarn cache." },

    { "label": "Audit security (npm)", "code": "npm audit", "desc": "Run a security audit on dependencies." },
    { "label": "Audit security (yarn)", "code": "yarn audit", "desc": "Run a security audit with Yarn." },

    { "label": "Generate lockfile (npm)", "code": "npm install", "desc": "Generates package-lock.json." },
    { "label": "Generate lockfile (yarn)", "code": "yarn install", "desc": "Generates yarn.lock file." }
  ]
},
  {
  "title": "Next.js Data Fetching",
  "items": [
    {
      "label": "getStaticProps",
      "code": "export async function getStaticProps() {\n  return { props: { /* data */ } }\n}",
      "desc": "Fetch data at build time (Pages Router)."
    },
    {
      "label": "getServerSideProps",
      "code": "export async function getServerSideProps(ctx) {\n  return { props: { /* data */ } }\n}",
      "desc": "Fetch data on every request (Pages Router)."
    },
    {
      "label": "getStaticPaths",
      "code": "export async function getStaticPaths() {\n  return { paths: [], fallback: false }\n}",
      "desc": "Define dynamic static routes (Pages Router)."
    },
    {
      "label": "Client-side fetch (useEffect)",
      "code": "import { useEffect, useState } from \"react\"\n\nexport default function Page() {\n  const [data, setData] = useState(null)\n  useEffect(() => {\n    fetch(\"/api/data\").then(res => res.json()).then(setData)\n  }, [])\n  return <pre>{JSON.stringify(data)}</pre>\n}",
      "desc": "Fetch data on client-side (CSR)."
    },
    {
      "label": "Async server component",
      "code": "export default async function Page() {\n  const data = await getData()\n  return <pre>{JSON.stringify(data)}</pre>\n}",
      "desc": "Fetch directly inside a server component (App Router)."
    },
    {
      "label": "Fetch with cache",
      "code": "const data = await fetch(\"https://api.com/data\", { cache: \"force-cache\" }).then(r => r.json())",
      "desc": "Static fetch (default) â€” cached at build time."
    },
    {
      "label": "Fetch no cache",
      "code": "const data = await fetch(\"https://api.com/data\", { cache: \"no-store\" }).then(r => r.json())",
      "desc": "Always fetch fresh data (like getServerSideProps)."
    },
    {
      "label": "ISR (Revalidate)",
      "code": "const data = await fetch(\"https://api.com/data\", { next: { revalidate: 60 } }).then(r => r.json())",
      "desc": "Incremental Static Regeneration with 60s revalidation."
    },
    {
      "label": "Route handler (GET)",
      "code": "export async function GET(req) {\n  return Response.json({ hello: \"world\" })\n}",
      "desc": "API endpoint in `app/api/route.js` (App Router)."
    },
    {
      "label": "Route handler (POST)",
      "code": "export async function POST(req) {\n  const body = await req.json()\n  return Response.json({ received: body })\n}",
      "desc": "POST API endpoint in `app/api/route.js`."
    },
    {
      "label": "Dynamic route params",
      "code": "export default function Page({ params }) {\n  return <div>ID: {params.id}</div>\n}",
      "desc": "Access `[id]` from dynamic route params (App Router)."
    },
    {
      "label": "Search params",
      "code": "export default function Page({ searchParams }) {\n  return <div>Query: {searchParams.q}</div>\n}",
      "desc": "Read query params in App Router."
    }
  ]
},
  {
  "title": "React Patterns",
  "items": [
    {
      "label": "State update from prev",
      "code": "setCount(prev => prev + 1)",
      "desc": "Safe state update using previous value."
    },
    {
      "label": "Effect with cleanup",
      "code": "useEffect(() => {\n  const id = setInterval(doWork, 1000)\n  return () => clearInterval(id)\n}, [])",
      "desc": "Cleanup side-effects to avoid leaks."
    },
    {
      "label": "Lazy init state",
      "code": "const [value] = useState(() => computeExpensive())",
      "desc": "Initialize state only once using a function."
    },
    {
      "label": "Memoize expensive calc",
      "code": "const value = useMemo(() => heavy(data), [data])",
      "desc": "Avoid recomputation on every render."
    },
    {
      "label": "Memoize callback",
      "code": "const handler = useCallback(() => doSomething(id), [id])",
      "desc": "Keep stable function reference across renders."
    },
    {
      "label": "React.memo",
      "code": "export default React.memo(MyComponent)",
      "desc": "Prevent re-render if props are unchanged."
    },
    {
      "label": "Derived state",
      "code": "const total = useMemo(() => items.reduce((a,b)=>a+b,0), [items])",
      "desc": "Compute values from state instead of storing redundantly."
    },
    {
      "label": "Reducer",
      "code": "const [state, dispatch] = useReducer(reducer, init)",
      "desc": "State logic in a reducer function (alternative to useState)."
    },
    {
      "label": "Context provider",
      "code": "const Ctx = createContext()\n<Ctx.Provider value={value}><App /></Ctx.Provider>",
      "desc": "Provide global state via Context."
    },
    {
      "label": "useContext",
      "code": "const value = useContext(Ctx)",
      "desc": "Consume context values inside a component."
    },
    {
      "label": "Compound components",
      "code": "<Modal><Modal.Header/><Modal.Body/><Modal.Footer/></Modal>",
      "desc": "Composition pattern for reusable UI."
    },
    {
      "label": "Conditional render",
      "code": "{isLoggedIn ? <Dashboard /> : <Login />}",
      "desc": "Render different components based on condition."
    },
    {
      "label": "Short-circuit render",
      "code": "{items.length > 0 && <List items={items} />}",
      "desc": "Render only if condition is truthy."
    },
    {
      "label": "Render list",
      "code": "{todos.map(t => <Todo key={t.id} {...t} />)}",
      "desc": "Render collections with a key."
    },
    {
      "label": "Custom hook",
      "code": "function useToggle(init=false){\n  const [on,setOn]=useState(init)\n  const toggle=()=>setOn(o=>!o)\n  return [on,toggle]\n}",
      "desc": "Encapsulate reusable logic into hooks."
    },
    {
      "label": "Hook composition",
      "code": "function useUser(){\n  const {id}=useAuth()\n  return useQuery([\"user\",id],()=>fetchUser(id))\n}",
      "desc": "Combine hooks to build abstractions."
    },
    {
      "label": "Render props",
      "code": "<DataProvider render={data => <Chart data={data}/>} />",
      "desc": "Pass a function as a child for flexible rendering."
    },
    {
      "label": "Controlled component",
      "code": "<input value={value} onChange={e=>setValue(e.target.value)} />",
      "desc": "Form element controlled by React state."
    },
    {
      "label": "Uncontrolled component",
      "code": "const ref=useRef()\n<input ref={ref} defaultValue=\"hi\" />",
      "desc": "Form element stores its own state, accessed via ref."
    },
    {
      "label": "Forward ref",
      "code": "const MyInput = forwardRef((props, ref) => <input ref={ref} {...props} />)",
      "desc": "Forward refs to DOM elements in custom components."
    },
    {
      "label": "Portals",
      "code": "createPortal(<Modal />, document.body)",
      "desc": "Render children into a different part of the DOM."
    },
    {
      "label": "Error boundary",
      "code": "class ErrorBoundary extends React.Component {...}",
      "desc": "Catch errors in component tree (only class components)."
    },
    {
      "label": "Suspense",
      "code": "<Suspense fallback={<Loading/>}><Profile/></Suspense>",
      "desc": "Show fallback while async components load."
    },
    {
      "label": "Code splitting",
      "code": "const LazyComp = React.lazy(() => import(\"./Comp\"))",
      "desc": "Lazy-load components for performance."
    },
    {
      "label": "Prop drilling solution",
      "code": "// Instead of passing props deeply, use Context or custom hooks",
      "desc": "Avoid passing props through many levels."
    },
    {
      "label": "Higher Order Component",
      "code": "function withLogger(Component){\n  return props => {\n    console.log(props)\n    return <Component {...props} />\n  }\n}",
      "desc": "Function that takes a component and returns an enhanced component."
    },
    {
      "label": "Fragment",
      "code": "<> <Header /> <Content /> </>",
      "desc": "Group children without adding extra DOM nodes."
    },
    {
      "label": "Keyed animation list",
      "code": "{items.map(item => <motion.div key={item.id}>{item.text}</motion.div>)}",
      "desc": "Use keys for stable animations in lists."
    }
  ]
},
  {
  "title": "Bash / Shell",
  "items": [
    { "label": "Current dir", "code": "pwd", "desc": "Print working directory." },
    { "label": "List files", "code": "ls -la", "desc": "Long list including hidden files." },
    { "label": "Change dir", "code": "cd path/", "desc": "Move into a directory." },
    { "label": "Back dir", "code": "cd -", "desc": "Go back to previous directory." },
    { "label": "Home dir", "code": "cd ~", "desc": "Go to home directory." },
    { "label": "Make dir", "code": "mkdir newdir", "desc": "Create a directory." },
    { "label": "Remove dir", "code": "rmdir emptydir", "desc": "Remove empty directory." },
    { "label": "Remove recursively", "code": "rm -rf folder/", "desc": "Force delete directory recursively." },
    { "label": "Copy file", "code": "cp file.txt backup.txt", "desc": "Copy a file." },
    { "label": "Copy dir", "code": "cp -r src/ dest/", "desc": "Copy a directory recursively." },
    { "label": "Move/Rename", "code": "mv old.txt new.txt", "desc": "Move or rename a file." },
    { "label": "Touch", "code": "touch file.txt", "desc": "Create an empty file or update timestamp." },
    { "label": "Show file", "code": "cat file.txt", "desc": "Print file contents." },
    { "label": "Head", "code": "head -n 10 file.txt", "desc": "Show first 10 lines." },
    { "label": "Tail", "code": "tail -n 10 file.txt", "desc": "Show last 10 lines." },
    { "label": "Follow logs", "code": "tail -f app.log", "desc": "Stream log updates." },
    { "label": "Less", "code": "less file.txt", "desc": "View file with paging." },
    { "label": "Find by name", "code": "find . -name \"*.js\"", "desc": "Find files by pattern." },
    { "label": "Search in files", "code": "grep -R \"pattern\" .", "desc": "Recursive text search in files." },
    { "label": "Case-insensitive grep", "code": "grep -i \"pattern\" file.txt", "desc": "Search ignoring case." },
    { "label": "Count matches", "code": "grep -c \"pattern\" file.txt", "desc": "Count occurrences." },
    { "label": "Change mode", "code": "chmod 755 script.sh", "desc": "Set file permissions." },
    { "label": "Change owner", "code": "chown user:group file.txt", "desc": "Change file owner/group." },
    { "label": "Executable", "code": "chmod +x script.sh", "desc": "Make script executable." },
    { "label": "Archive", "code": "tar -czf archive.tgz folder/", "desc": "Create compressed tar archive." },
    { "label": "Extract tar", "code": "tar -xzf archive.tgz", "desc": "Extract tar archive." },
    { "label": "Zip", "code": "zip archive.zip file1 file2", "desc": "Create zip archive." },
    { "label": "Unzip", "code": "unzip archive.zip", "desc": "Extract zip archive." },
    { "label": "List processes", "code": "ps aux", "desc": "Show all running processes." },
    { "label": "Search process", "code": "ps aux | grep node", "desc": "Find process by name." },
    { "label": "Kill by PID", "code": "kill -9 <pid>", "desc": "Force kill process by PID." },
    { "label": "Background job", "code": "command &", "desc": "Run command in background." },
    { "label": "Jobs", "code": "jobs", "desc": "List background jobs." },
    { "label": "Foreground job", "code": "fg %1", "desc": "Bring job 1 to foreground." },
    { "label": "Ping host", "code": "ping -c 4 google.com", "desc": "Ping host 4 times." },
    { "label": "Curl GET", "code": "curl https://api.com", "desc": "Fetch API response." },
    { "label": "Curl POST", "code": "curl -X POST -d \"a=1&b=2\" https://api.com", "desc": "Send POST request." },
    { "label": "Download file", "code": "wget https://file.com/file.zip", "desc": "Download file from internet." },
    { "label": "Check ports", "code": "netstat -tulnp", "desc": "List listening ports." },
    { "label": "Disk usage", "code": "df -h", "desc": "Show mounted disks usage." },
    { "label": "Dir size", "code": "du -sh folder/", "desc": "Check folder size." },
    { "label": "Free memory", "code": "free -h", "desc": "Show memory usage." },
    { "label": "Uptime", "code": "uptime", "desc": "Show system uptime." },
    { "label": "Whoami", "code": "whoami", "desc": "Show current user." },
    { "label": "Env vars", "code": "printenv", "desc": "List environment variables." },
    { "label": "For loop", "code": "for f in *.txt; do echo $f; done", "desc": "Loop through files." },
    { "label": "If condition", "code": "if [ -f file.txt ]; then echo exists; fi", "desc": "Check if file exists." },
    { "label": "Variable", "code": "NAME=\"DevNotes\"\necho $NAME", "desc": "Define and print a variable." },
    { "label": "Read input", "code": "read -p \"Name: \" NAME", "desc": "Prompt user input into variable." }
  ]
},
  {
  "title": "Docker",
  "items": [
    { "label": "Build image", "code": "docker build -t myapp:latest .", "desc": "Build an image from Dockerfile." },
    { "label": "List images", "code": "docker images", "desc": "Show all local images." },
    { "label": "Tag image", "code": "docker tag myapp:latest myrepo/myapp:v1", "desc": "Tag an image for repo/version." },
    { "label": "Remove image", "code": "docker rmi <image>", "desc": "Delete an image." },
    { "label": "Inspect image", "code": "docker inspect <image>", "desc": "View detailed info of an image." },
    { "label": "Save image", "code": "docker save -o myapp.tar myapp:latest", "desc": "Save image to tar file." },
    { "label": "Load image", "code": "docker load -i myapp.tar", "desc": "Load image from tar file." },
    { "label": "Push image", "code": "docker push myrepo/myapp:v1", "desc": "Upload image to Docker registry." },
    { "label": "Pull image", "code": "docker pull node:18", "desc": "Download image from Docker Hub." },

    { "label": "Run container", "code": "docker run --rm -p 3000:3000 myapp:latest", "desc": "Run container mapping port 3000." },
    { "label": "Run detached", "code": "docker run -d --name myapp myapp:latest", "desc": "Run in background with name." },
    { "label": "Run with volume", "code": "docker run -v $(pwd):/app myapp", "desc": "Mount host directory to container." },
    { "label": "Run with env", "code": "docker run -e NODE_ENV=production myapp", "desc": "Pass environment variable." },
    { "label": "Run interactive", "code": "docker run -it ubuntu bash", "desc": "Run interactive terminal." },

    { "label": "List containers", "code": "docker ps -a", "desc": "Show running and stopped containers." },
    { "label": "Stop container", "code": "docker stop <id>", "desc": "Stop a running container." },
    { "label": "Start container", "code": "docker start <id>", "desc": "Start a stopped container." },
    { "label": "Restart container", "code": "docker restart <id>", "desc": "Restart a container." },
    { "label": "Remove container", "code": "docker rm <id>", "desc": "Delete a stopped container." },
    { "label": "Inspect container", "code": "docker inspect <id>", "desc": "Detailed container info." },
    { "label": "Container stats", "code": "docker stats", "desc": "Live CPU/memory/network usage." },
    { "label": "Container processes", "code": "docker top <id>", "desc": "Show processes inside a container." },

    { "label": "Logs", "code": "docker logs -f <id>", "desc": "Follow container logs." },
    { "label": "Exec shell", "code": "docker exec -it <id> sh", "desc": "Open shell inside container." },
    { "label": "Copy to container", "code": "docker cp file.txt <id>:/app/", "desc": "Copy file into container." },
    { "label": "Copy from container", "code": "docker cp <id>:/app/file.txt ./", "desc": "Copy file out of container." },
    { "label": "Export container", "code": "docker export <id> > container.tar", "desc": "Export container filesystem." },
    { "label": "Import container", "code": "docker import container.tar myimage:imported", "desc": "Import as image." },

    { "label": "List volumes", "code": "docker volume ls", "desc": "Show all volumes." },
    { "label": "Create volume", "code": "docker volume create myvol", "desc": "Make a new volume." },
    { "label": "Remove volume", "code": "docker volume rm <name>", "desc": "Delete a volume." },
    { "label": "Prune volumes", "code": "docker volume prune", "desc": "Delete all unused volumes." },

    { "label": "List networks", "code": "docker network ls", "desc": "Show all networks." },
    { "label": "Create network", "code": "docker network create mynet", "desc": "Make a new network." },
    { "label": "Remove network", "code": "docker network rm <name>", "desc": "Delete a network." },
    { "label": "Connect container to net", "code": "docker network connect mynet <id>", "desc": "Attach container to network." },
    { "label": "Disconnect network", "code": "docker network disconnect mynet <id>", "desc": "Detach container from network." },

    { "label": "System prune", "code": "docker system prune -af", "desc": "Remove unused containers, images, networks." },
    { "label": "Clean volumes", "code": "docker volume prune", "desc": "Delete unused volumes." },
    { "label": "Disk usage", "code": "docker system df", "desc": "Show disk usage by Docker." },

    { "label": "Compose Up", "code": "docker-compose up -d", "desc": "Start services in docker-compose.yml." },
    { "label": "Compose Down", "code": "docker-compose down", "desc": "Stop and remove services." },
    { "label": "Compose Rebuild", "code": "docker-compose up -d --build", "desc": "Rebuild images & restart services." },
    { "label": "Compose Logs", "code": "docker-compose logs -f", "desc": "Stream logs from all services." },
    { "label": "Compose Exec", "code": "docker-compose exec web sh", "desc": "Run command in a service container." },
    { "label": "Compose Scale", "code": "docker-compose up -d --scale web=3", "desc": "Run multiple instances of a service." },
    { "label": "Compose Config", "code": "docker-compose config", "desc": "Validate and view full compose config." }
  ]
}
,
{
  "title": "MongoDB",
  "items": [
    { "label": "Connect Atlas", "code": "mongodb+srv://user:pass@cluster/db?retryWrites=true&w=majority", "desc": "MongoDB Atlas connection string." },
    { "label": "Connect local shell", "code": "mongosh \"mongodb://localhost:27017\"", "desc": "Connect to local MongoDB instance." },

    { "label": "Show databases", "code": "show dbs", "desc": "List all databases." },
    { "label": "Use database", "code": "use mydb", "desc": "Switch/create a database." },
    { "label": "Show collections", "code": "show collections", "desc": "List collections in current DB." },

    { "label": "Insert one", "code": "db.users.insertOne({ name: \"Alice\", age: 25 })", "desc": "Insert a single document." },
    { "label": "Insert many", "code": "db.users.insertMany([{ name: \"Bob\" }, { name: \"Charlie\" }])", "desc": "Insert multiple documents." },

    { "label": "Find all", "code": "db.users.find()", "desc": "Query all documents." },
    { "label": "Find with filter", "code": "db.users.find({ active: true })", "desc": "Query documents matching condition." },
    { "label": "Find one", "code": "db.users.findOne({ email: \"a@b.com\" })", "desc": "Get a single document." },
    { "label": "Projection", "code": "db.users.find({}, { name: 1, email: 1 })", "desc": "Return only selected fields." },

    { "label": "Update one", "code": "db.users.updateOne({ name: \"Alice\" }, { $set: { age: 30 } })", "desc": "Update first matching document." },
    { "label": "Update many", "code": "db.users.updateMany({ active: false }, { $set: { active: true } })", "desc": "Update multiple documents." },
    { "label": "Replace", "code": "db.users.replaceOne({ name: \"Alice\" }, { name: \"Alice\", age: 26 })", "desc": "Replace entire document." },

    { "label": "Delete one", "code": "db.users.deleteOne({ name: \"Alice\" })", "desc": "Delete first matching document." },
    { "label": "Delete many", "code": "db.users.deleteMany({ active: false })", "desc": "Delete multiple documents." },

    { "label": "Comparison", "code": "db.users.find({ age: { $gt: 18 } })", "desc": "Find users older than 18." },
    { "label": "Logical", "code": "db.users.find({ $or: [ { role: \"admin\" }, { role: \"editor\" } ] })", "desc": "Use OR conditions." },
    { "label": "Regex search", "code": "db.users.find({ name: /al/i })", "desc": "Case-insensitive regex match." },
    { "label": "Array contains", "code": "db.posts.find({ tags: \"js\" })", "desc": "Match documents with a specific array value." },
    { "label": "Array operator", "code": "db.posts.find({ tags: { $in: [\"js\",\"react\"] } })", "desc": "Match if array contains any of given values." },
    { "label": "Exists", "code": "db.users.find({ phone: { $exists: true } })", "desc": "Find docs where field exists." },
    { "label": "Type check", "code": "db.users.find({ age: { $type: \"int\" } })", "desc": "Find docs with specific BSON type." },

    { "label": "Create index", "code": "db.users.createIndex({ email: 1 })", "desc": "Index on email field (ascending)." },
    { "label": "Unique index", "code": "db.users.createIndex({ email: 1 }, { unique: true })", "desc": "Ensure unique values for email." },
    { "label": "Compound index", "code": "db.users.createIndex({ lastName: 1, firstName: 1 })", "desc": "Multi-field index." },
    { "label": "List indexes", "code": "db.users.getIndexes()", "desc": "Show all indexes on collection." },
    { "label": "Drop index", "code": "db.users.dropIndex(\"email_1\")", "desc": "Remove specific index." },

    { "label": "Count docs", "code": "db.users.countDocuments({ active: true })", "desc": "Count matching documents." },
    { "label": "Distinct values", "code": "db.users.distinct(\"country\")", "desc": "Get unique field values." },

    { "label": "Aggregation pipeline", "code": "db.orders.aggregate([\n  { $match: { status: \"active\" } },\n  { $group: { _id: \"$customerId\", total: { $sum: \"$amount\" } } }\n])", "desc": "Group and aggregate documents." },
    { "label": "Sort & limit", "code": "db.users.find().sort({ age: -1 }).limit(5)", "desc": "Sort results and limit output." },
    { "label": "Skip & limit", "code": "db.users.find().skip(10).limit(5)", "desc": "Pagination with skip/limit." },

    { "label": "Drop collection", "code": "db.users.drop()", "desc": "Delete entire collection." },
    { "label": "Drop database", "code": "db.dropDatabase()", "desc": "Delete current database." },

    { "label": "Stats", "code": "db.stats()", "desc": "Show database stats." },
    { "label": "Collection stats", "code": "db.users.stats()", "desc": "Show collection stats." },

    { "label": "Backup database", "code": "mongodump --db=mydb --out=/backup", "desc": "Backup a database." },
    { "label": "Restore database", "code": "mongorestore --db=mydb /backup/mydb", "desc": "Restore database from backup." },
    { "label": "Export collection", "code": "mongoexport --db=mydb --collection=users --out=users.json", "desc": "Export collection to JSON/CSV." },
    { "label": "Import collection", "code": "mongoimport --db=mydb --collection=users --file=users.json --jsonArray", "desc": "Import data from JSON/CSV." }
  ]
}
,
  {
    "title": "HTTP Status Codes",
    "items": [
      { "label": "200 OK", "code": "200", "desc": "Request succeeded." },
      { "label": "201 Created", "code": "201", "desc": "Resource successfully created." },
      { "label": "202 Accepted", "code": "202", "desc": "Request accepted for processing (async)." },
      { "label": "204 No Content", "code": "204", "desc": "Success with no response body." },
      { "label": "301 Moved Permanently", "code": "301", "desc": "Resource moved to a new permanent URI." },
      { "label": "302 Found", "code": "302", "desc": "Temporary redirect." },
      { "label": "303 See Other", "code": "303", "desc": "Redirect to another URI using GET." },
      { "label": "304 Not Modified", "code": "304", "desc": "Resource not modified (cached response allowed)." },
      { "label": "307 Temporary Redirect", "code": "307", "desc": "Redirect, method preserved." },
      { "label": "308 Permanent Redirect", "code": "308", "desc": "Permanent redirect, method preserved." },
      { "label": "400 Bad Request", "code": "400", "desc": "Malformed syntax / invalid request." },
      { "label": "401 Unauthorized", "code": "401", "desc": "Authentication required or failed." },
      { "label": "403 Forbidden", "code": "403", "desc": "Server understood but refuses request." },
      { "label": "404 Not Found", "code": "404", "desc": "Resource not found." },
      { "label": "405 Method Not Allowed", "code": "405", "desc": "HTTP method not supported for resource." },
      { "label": "408 Request Timeout", "code": "408", "desc": "Client did not send request in time." },
      { "label": "409 Conflict", "code": "409", "desc": "Request conflicts with resource state." },
      { "label": "410 Gone", "code": "410", "desc": "Resource permanently removed." },
      { "label": "418 Iâ€™m a Teapot", "code": "418", "desc": "Easter egg from RFC 2324 (HTCPCP)." },
      { "label": "429 Too Many Requests", "code": "429", "desc": "Rate limit exceeded." },
      { "label": "500 Internal Server Error", "code": "500", "desc": "Unexpected server error." },
      { "label": "501 Not Implemented", "code": "501", "desc": "Server does not support request method." },
      { "label": "502 Bad Gateway", "code": "502", "desc": "Invalid response from upstream server." },
      { "label": "503 Service Unavailable", "code": "503", "desc": "Server temporarily overloaded or down." },
      { "label": "504 Gateway Timeout", "code": "504", "desc": "Upstream server failed to respond in time." },
      {
        "label": "505 HTTP Version Not Supported",
        "code": "505",
        "desc": "Server does not support request HTTP version."
      }
    ]
  },
  {
  "title": "Regex Quickies",
  "items": [
    { "label": "Digits only", "code": "^\\d+$", "desc": "Match one or more digits." },
    { "label": "Letters only", "code": "^[A-Za-z]+$", "desc": "Match only alphabets (no digits, no symbols)." },
    { "label": "Alphanumeric", "code": "^[A-Za-z0-9]+$", "desc": "Match letters and numbers only." },
    { "label": "Whitespace", "code": "\\s+", "desc": "Match one or more whitespace characters." },
    { "label": "Non-whitespace", "code": "\\S+", "desc": "Match one or more non-space characters." },
    { "label": "Word characters", "code": "\\w+", "desc": "Match word characters (letters, digits, underscore)." },
    { "label": "Non-word characters", "code": "\\W+", "desc": "Match anything except letters, digits, underscore." },
    { "label": "Any char (dot)", "code": ".", "desc": "Match any single character (except newline)." },
    { "label": "Start of string", "code": "^pattern", "desc": "Match only if at start of string." },
    { "label": "End of string", "code": "pattern$", "desc": "Match only if at end of string." },

    { "label": "Email", "code": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$", "desc": "Basic email format." },
    { "label": "Username", "code": "^[a-zA-Z0-9._-]{3,16}$", "desc": "3â€“16 chars, letters, numbers, underscore, dot, dash." },
    { "label": "Password (strong)", "code": "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$", "desc": "Min 8 chars, 1 upper, 1 lower, 1 number, 1 special." },
    { "label": "Phone (US)", "code": "^\\d{3}[- ]?\\d{3}[- ]?\\d{4}$", "desc": "US phone number formats." },
    { "label": "International Phone", "code": "^\\+?[0-9]{1,4}?[-.\\s]?\\(?[0-9]{1,3}?\\)?[-.\\s]?[0-9]{3,4}[-.\\s]?[0-9]{3,4}$", "desc": "Match international phone numbers." },

    { "label": "IPv4", "code": "^(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$", "desc": "Match IPv4 address." },
    { "label": "IPv6", "code": "^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$", "desc": "Match IPv6 address." },
    { "label": "MAC Address", "code": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", "desc": "Match MAC address." },
    { "label": "URL", "code": "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&\\/=]*)", "desc": "HTTP/HTTPS URL." },

    { "label": "Hex Color", "code": "^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$", "desc": "Hex color (#fff or #ffffff)." },
    { "label": "File extension", "code": "^.*\\.(jpg|png|gif|webp)$", "desc": "Match common image file extensions." },
    { "label": "HTML Tag", "code": "<(\"[^\"]*\"|'[^']*'|[^'\">])*>", "desc": "Match a simple HTML tag." },
    { "label": "No special chars", "code": "^[A-Za-z0-9 ]*$", "desc": "Allow only letters, numbers, and spaces." },

    { "label": "Date (YYYY-MM-DD)", "code": "^\\d{4}-\\d{2}-\\d{2}$", "desc": "Simple ISO date format." },
    { "label": "Time (HH:MM 24h)", "code": "^([01]\\d|2[0-3]):([0-5]\\d)$", "desc": "24-hour time format." },
    { "label": "Date (MM/DD/YYYY)", "code": "^(0[1-9]|1[0-2])[\\/](0[1-9]|[12][0-9]|3[01])[\\/](\\d{4})$", "desc": "US date format." },
    { "label": "Postal Code (US ZIP)", "code": "^\\d{5}(-\\d{4})?$", "desc": "5-digit or ZIP+4 format." },

    { "label": "Credit Card", "code": "^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12})$", "desc": "Visa, MasterCard, Amex, Discover." },
    { "label": "UUID v4", "code": "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$", "desc": "Match UUID version 4." },

    { "label": "HTML Comments", "code": "<!--[\\s\\S]*?-->", "desc": "Match HTML comments." },
    { "label": "JSON Key", "code": "\"[a-zA-Z0-9_]+\"\\s*:", "desc": "Match a simple JSON key." },
    { "label": "JavaScript Variable", "code": "\\b(var|let|const)\\s+[a-zA-Z_$][a-zA-Z0-9_$]*", "desc": "Match JS variable declaration." },
    { "label": "CSS Property", "code": "[a-z-]+\\s*:\\s*[^;]+;", "desc": "Match CSS property/value pairs." },

    { "label": "Lookahead (positive)", "code": "\\d(?=px)", "desc": "Match digit only if followed by 'px'." },
    { "label": "Lookahead (negative)", "code": "foo(?!bar)", "desc": "Match 'foo' not followed by 'bar'." },
    { "label": "Lookbehind (positive)", "code": "(?<=\\$)\\d+", "desc": "Match number preceded by $." },
    { "label": "Lookbehind (negative)", "code": "(?<!USD)\\d+", "desc": "Match number not preceded by USD." }
  ]
},
  {
  "title": "JavaScript",
  "items": [
    { "label": "Declare variables", "code": "const x = 1; let y = 2; var z = 3;", "desc": "Block vs function scope." },
    { "label": "Types", "code": "typeof 123 // 'number'\ntypeof 'hi' // 'string'\ntypeof true // 'boolean'\nArray.isArray([]) // true", "desc": "Check data types." },
    { "label": "Operators", "code": "== vs ===, != vs !==, &&, ||, ??, ?", "desc": "Equality, logical, nullish." },
    { "label": "Template strings", "code": "const msg = `Hi ${name}!`", "desc": "String interpolation." },

    { "label": "Arrow function", "code": "const add = (a,b)=>a+b;", "desc": "Concise function syntax." },
    { "label": "Default params", "code": "function greet(n='Guest'){return 'Hi '+n}", "desc": "Default arguments." },
    { "label": "Rest params", "code": "function sum(...nums){return nums.reduce((a,b)=>a+b)}", "desc": "Gather args array." },
    { "label": "Spread", "code": "const arr2=[...arr1,4,5]", "desc": "Expand arrays/objects." },
    { "label": "Destructuring", "code": "const {id,email}=user; const [a,b]=[1,2]", "desc": "Extract props/elements." },

    { "label": "Object shorthand", "code": "const user={name,age}", "desc": "Shorthand properties." },
    { "label": "Optional chaining", "code": "user?.profile?.email ?? 'N/A'", "desc": "Safe access + fallback." },

    { "label": "Closure", "code": "function outer(){let c=0;return()=>++c}", "desc": "Function remembers scope." },
    { "label": "This keyword", "code": "obj.method=function(){return this}", "desc": "`this` depends on call site." },
    { "label": "Bind/Call/Apply", "code": "fn.call(ctx,a); fn.apply(ctx,[a]); fn.bind(ctx)", "desc": "Set `this` manually." },

    { "label": "Prototype", "code": "obj.__proto__", "desc": "Objects inherit via prototype." },
    { "label": "Class", "code": "class User{constructor(n){this.n=n}}", "desc": "ES6 class syntax." },
    { "label": "Extends", "code": "class Admin extends User{}", "desc": "Inheritance in classes." },
    { "label": "Static", "code": "class X{static hi(){return 'hi'}}", "desc": "Static methods." },
    { "label": "Getter/Setter", "code": "get name(){...} set name(v){...}", "desc": "Property accessors." },

    { "label": "Symbol", "code": "const id=Symbol('id')", "desc": "Unique hidden keys." },
    { "label": "Iterator", "code": "for(const v of arr){...}", "desc": "Iterable protocol." },
    { "label": "Generator", "code": "function* gen(){yield 1;yield 2}", "desc": "Pause/resume functions." },

    { "label": "Map/Set", "code": "new Map([['a',1]]); new Set([1,2])", "desc": "Key-value & unique values." },
    { "label": "WeakMap/WeakSet", "code": "new WeakMap(); new WeakSet()", "desc": "GC-safe collections." },

    { "label": "String methods", "code": "'hi'.toUpperCase(); 'x,y'.split(',')", "desc": "Common string utils." },
    { "label": "Number methods", "code": "Number.isNaN(NaN); (42).toFixed(2)", "desc": "Number utilities." },
    { "label": "Date", "code": "new Date().toISOString()", "desc": "Work with dates." },
    { "label": "Intl", "code": "new Intl.DateTimeFormat('en').format(new Date())", "desc": "Internationalization." },

    { "label": "Error", "code": "try{ risky() }catch(e){console.error(e)}", "desc": "Error handling." },
    { "label": "Custom Error", "code": "class MyErr extends Error{}", "desc": "Custom error classes." },

    { "label": "Promise", "code": "new Promise((res,rej)=>res('ok'))", "desc": "Async computation." },
    { "label": "Async/Await", "code": "const d=await fetch(url).then(r=>r.json())", "desc": "Simplify async code." },
    { "label": "Promise.all", "code": "await Promise.all([p1,p2])", "desc": "Parallel promises." },
    { "label": "Promise.race", "code": "await Promise.race([p1,p2])", "desc": "First settled wins." },
    { "label": "Promise.allSettled", "code": "await Promise.allSettled([p1,p2])", "desc": "Wait all settled." },
    { "label": "Event loop", "code": "setTimeout(()=>console.log('tick'))", "desc": "JS concurrency model." },
    { "label": "AbortController", "code": "const c=new AbortController(); fetch(url,{signal:c.signal})", "desc": "Cancel fetch." },

    { "label": "JSON", "code": "JSON.parse(str); JSON.stringify(obj)", "desc": "Data conversion." },
    { "label": "LocalStorage", "code": "localStorage.setItem('k','v')", "desc": "Persistent storage." },
    { "label": "SessionStorage", "code": "sessionStorage.getItem('k')", "desc": "Session-only storage." },
    { "label": "Clipboard", "code": "await navigator.clipboard.writeText('hi')", "desc": "Copy to clipboard." },
    { "label": "Notification API", "code": "new Notification('Hi')", "desc": "Show desktop notification." },
    { "label": "WebSocket", "code": "new WebSocket('ws://')", "desc": "Real-time connection." },
    { "label": "Worker", "code": "new Worker('worker.js')", "desc": "Run background tasks." },

    { "label": "Select element", "code": "document.querySelector('#id')", "desc": "Find DOM node." },
    { "label": "Event listener", "code": "el.addEventListener('click',fn)", "desc": "Attach handler." },
    { "label": "Modify DOM", "code": "el.textContent='Hi'", "desc": "Change content." },
    { "label": "Create element", "code": "document.createElement('div')", "desc": "New DOM node." },

    { "label": "Import/Export", "code": "export default x; import x from './x.js'", "desc": "Modules." },
    { "label": "Named export", "code": "export const a=1; import {a} from './x.js'", "desc": "Import by name." },
    { "label": "Dynamic import", "code": "const mod=await import('./x.js')", "desc": "Load at runtime." },

    { "label": "Nullish coalescing", "code": "a ?? 'default'", "desc": "Fallback only if null/undefined." },
    { "label": "BigInt", "code": "const big=123n", "desc": "Large integers." },
    { "label": "Private fields", "code": "class X{#p=1; getP(){return this.#p}}", "desc": "Encapsulation in classes." },
    { "label": "Top-level await", "code": "const d=await fetch('/api')", "desc": "Await outside functions." }
  ]
},
  {
  "title": "TypeScript",
  "items": [
    { "label": "Type alias", "code": "type User = { id: number; name: string }", "desc": "Custom type." },
    { "label": "Interface", "code": "interface Point { x: number; y: number }", "desc": "Shape for objects." },
    { "label": "Extending interfaces", "code": "interface A { x: number }\ninterface B extends A { y: number }", "desc": "Interface inheritance." },

    { "label": "Union", "code": "let id: string | number", "desc": "Variable with multiple types." },
    { "label": "Intersection", "code": "type A = {x:number}; type B = {y:number}; type C = A & B;", "desc": "Combine types." },
    { "label": "Literal types", "code": "let status: \"success\" | \"error\"", "desc": "Restrict to fixed values." },
    { "label": "Tuple", "code": "let pair: [string, number] = [\"age\", 30]", "desc": "Fixed length array." },
    { "label": "Readonly", "code": "type ReadonlyUser = Readonly<User>", "desc": "Make props immutable." },

    { "label": "Function type", "code": "type Fn = (a: number, b: number) => number", "desc": "Function signature." },
    { "label": "Arrow func", "code": "const add = (a: number, b: number): number => a + b", "desc": "Arrow function with types." },
    { "label": "Optional param", "code": "function log(msg?: string){ console.log(msg) }", "desc": "Optional arguments." },
    { "label": "Default param", "code": "function greet(name = \"Guest\"){ return \"Hi \" + name }", "desc": "Default values." },
    { "label": "Rest param", "code": "function sum(...nums: number[]){ return nums.reduce((a,b)=>a+b,0) }", "desc": "Variable args." },
    { "label": "Overloads", "code": "function len(x: string): number;\nfunction len(x: any[]): number;\nfunction len(x: any) { return x.length }", "desc": "Multiple call signatures." },

    { "label": "Generic function", "code": "function wrap<T>(value: T): T { return value }", "desc": "Basic generic." },
    { "label": "Generic constraint", "code": "function logLen<T extends { length: number }>(x: T){ console.log(x.length) }", "desc": "Restrict type param." },
    { "label": "Generic interface", "code": "interface Box<T> { value: T }", "desc": "Generic type containers." },
    { "label": "Generic class", "code": "class Store<T> { constructor(public item:T){} }", "desc": "Reusable classes." },

    { "label": "Class basic", "code": "class User { constructor(public id:number, public name:string){} }", "desc": "Shorthand for fields." },
    { "label": "Inheritance", "code": "class Admin extends User { role=\"admin\" }", "desc": "Subclass with extends." },
    { "label": "Abstract", "code": "abstract class Shape { abstract area(): number }", "desc": "Base class with abstract methods." },
    { "label": "Implements", "code": "class Dog implements Animal { bark(){ return \"woof\" } }", "desc": "Class enforces interface." },
    { "label": "Readonly prop", "code": "class Config { readonly url=\"...\" }", "desc": "Immutable property." },
    { "label": "Private field", "code": "class Counter { #count=0; inc(){ this.#count++ } }", "desc": "True private field." },

    { "label": "Type narrowing", "code": "if (typeof id === \"string\") { /* ... */ }", "desc": "Refine union." },
    { "label": "Custom type guard", "code": "function isString(x: unknown): x is string { return typeof x === 'string' }", "desc": "User-defined narrowing." },

    { "label": "Keyof", "code": "type Keys = keyof User", "desc": "Union of keys of a type." },
    { "label": "Indexed access", "code": "type IdType = User[\"id\"]", "desc": "Type of a property." },
    { "label": "Mapped type", "code": "type PartialUser = { [K in keyof User]?: User[K] }", "desc": "Transform properties." },
    { "label": "Conditional type", "code": "type IsString<T> = T extends string ? true : false", "desc": "Type logic." },
    { "label": "Infer keyword", "code": "type Return<T> = T extends (...args:any)=>infer R ? R : never", "desc": "Extract return type." },

    { "label": "Utility types", "code": "Partial<T>, Required<T>, Pick<T,K>, Omit<T,K>, Record<K,T>, Exclude<T,U>, Extract<T,U>", "desc": "Built-in helpers." },

    { "label": "Import/Export", "code": "export function foo(){}\nimport { foo } from \"./lib\"", "desc": "ES modules with TS." },
    { "label": "Default export", "code": "export default class Service {}", "desc": "Single default export." },

    { "label": "Numeric enum", "code": "enum Direction { Up=1, Down, Left, Right }", "desc": "Auto-incremented numbers." },
    { "label": "String enum", "code": "enum Role { Admin=\"admin\", User=\"user\" }", "desc": "Fixed string values." },
    { "label": "Const enum", "code": "const enum Flag { Yes, No }", "desc": "Removed at compile time." },

    { "label": "Class decorator", "code": "function logClass(constructor: Function) { console.log(constructor.name) }", "desc": "Applied to class." },
    { "label": "Property decorator", "code": "function readonly(target:any, key:string){ Object.defineProperty(target,key,{writable:false}) }", "desc": "Applied to fields." },
    { "label": "Method decorator", "code": "function log(target:any, key:string, desc:PropertyDescriptor){...}", "desc": "Applied to methods." },

    { "label": "Namespaces", "code": "namespace Utils { export function hi(){ return \"hi\" } }", "desc": "Legacy scoping (avoid in modern TS)." },
    { "label": "Type assertion", "code": "let el = document.getElementById(\"id\") as HTMLDivElement", "desc": "Tell compiler specific type." },
    { "label": "Non-null assertion", "code": "let len = value!.length", "desc": "Skip null/undefined check." },

    { "label": "Unknown vs any", "code": "let x: unknown; if (typeof x===\"string\") x.toUpperCase()", "desc": "Safer than any." },
    { "label": "Never type", "code": "function fail(msg:string): never { throw new Error(msg) }", "desc": "Functions that donâ€™t return." },
    { "label": "Void type", "code": "function log(msg:string): void { console.log(msg) }", "desc": "No return value." },

    { "label": "TS Config basics", "code": "{ \"compilerOptions\": { \"strict\": true, \"target\": \"esnext\", \"module\": \"commonjs\" } }", "desc": "Basic tsconfig.json." },
    { "label": "ts-node", "code": "npx ts-node index.ts", "desc": "Run TS directly." },
    { "label": "tsc", "code": "npx tsc --noEmit", "desc": "Check types without output." }
  ]
}
,
  {
  "title": "Python",
  "items": [
    { "label": "Print", "code": "print(\"Hello, World!\")", "desc": "Output text." },
    { "label": "Comments", "code": "# single line\n\"\"\" multi-line \"\"\"", "desc": "Comment syntax." },
    { "label": "Variables", "code": "x = 10\ny = \"hi\"", "desc": "Dynamic typing." },
    { "label": "f-string", "code": "name = \"Bob\"\nprint(f\"Hi {name}\")", "desc": "String interpolation." },
    { "label": "Type hints", "code": "def add(a: int, b: int) -> int:\n    return a+b", "desc": "Optional typing." },
    { "label": "List", "code": "nums = [1,2,3]", "desc": "Ordered collection." },
    { "label": "Tuple", "code": "point = (10, 20)", "desc": "Immutable sequence." },
    { "label": "Set", "code": "{1,2,3}", "desc": "Unique unordered collection." },
    { "label": "Dict", "code": "{\"a\":1, \"b\":2}", "desc": "Key-value mapping." },
    { "label": "List comp", "code": "[x*2 for x in range(5)]", "desc": "Comprehension shorthand." },
    { "label": "Dict comp", "code": "{x:x**2 for x in range(5)}", "desc": "Dictionary comprehension." },
    { "label": "Function", "code": "def add(a,b): return a+b", "desc": "Define function." },
    { "label": "Default param", "code": "def greet(name=\"Guest\"): return f\"Hi {name}\"", "desc": "Function with defaults." },
    { "label": "Args & kwargs", "code": "def fn(*args, **kwargs): pass", "desc": "Variable arguments." },
    { "label": "Lambda", "code": "square = lambda x: x*x", "desc": "Anonymous function." },
    { "label": "Decorator", "code": "def deco(fn):\n  def wrap(): print(\"hi\"); fn()\n  return wrap", "desc": "Function wrapper." },
    { "label": "Generator", "code": "def gen():\n  yield 1\n  yield 2", "desc": "Lazy sequence with yield." },
    { "label": "If/else", "code": "if x>0: print(\"pos\")\nelse: print(\"neg\")", "desc": "Conditional." },
    { "label": "For loop", "code": "for i in range(5): print(i)", "desc": "Iteration." },
    { "label": "While loop", "code": "while n>0: n-=1", "desc": "Loop until false." },
    { "label": "Match", "code": "match status:\n case 200: print(\"ok\")\n case _: print(\"err\")", "desc": "Structural pattern matching (3.10+)." },
    { "label": "Class", "code": "class User:\n def __init__(self,name): self.name=name", "desc": "Basic class." },
    { "label": "Inheritance", "code": "class Admin(User): pass", "desc": "Subclassing." },
    { "label": "Static method", "code": "class Math:\n @staticmethod\n def add(a,b): return a+b", "desc": "Method without self." },
    { "label": "Class method", "code": "class C:\n @classmethod\n def make(cls): return cls()", "desc": "Bound to class not instance." },
    { "label": "Property", "code": "class Person:\n @property\n def age(self): return 42", "desc": "Computed attribute." },
    { "label": "Dataclass", "code": "from dataclasses import dataclass\n@dataclass\nclass Point: x:int; y:int", "desc": "Auto-generated init/eq/repr." },
    { "label": "Try/except", "code": "try: 1/0\nexcept ZeroDivisionError: print(\"err\")", "desc": "Catch exception." },
    { "label": "Raise", "code": "raise ValueError(\"bad\")", "desc": "Throw exception." },
    { "label": "Finally", "code": "try: f=open(\"x\")\nfinally: f.close()", "desc": "Cleanup block." },
    { "label": "Import", "code": "import math\nfrom os import path", "desc": "Import libraries." },
    { "label": "Virtual env", "code": "python -m venv .venv && source .venv/bin/activate", "desc": "Isolated environment." },
    { "label": "Pip install", "code": "pip install requests", "desc": "Install package." },
    { "label": "Requirements", "code": "pip freeze > requirements.txt", "desc": "Save dependencies." },
    { "label": "Read file", "code": "with open(\"file.txt\") as f:\n data=f.read()", "desc": "Read safely." },
    { "label": "Write file", "code": "with open(\"out.txt\",\"w\") as f:\n f.write(\"hello\")", "desc": "Write to file." },
    { "label": "CSV", "code": "import csv\nwith open(\"f.csv\") as f:\n csv.reader(f)", "desc": "Read CSV." },
    { "label": "JSON", "code": "import json\njson.loads('{\"a\":1}')", "desc": "Work with JSON." },
    { "label": "Enumerate", "code": "for i,val in enumerate([\"a\",\"b\"]): print(i,val)", "desc": "Index + value loop." },
    { "label": "Zip", "code": "for a,b in zip([1,2],[3,4]): print(a,b)", "desc": "Combine iterables." },
    { "label": "Map/filter", "code": "list(map(str,[1,2]))\nlist(filter(bool,[0,1,2]))", "desc": "Functional helpers." },
    { "label": "Any/all", "code": "any([0,1])\nall([1,1])", "desc": "Boolean reductions." },
    { "label": "Async func", "code": "async def main(): await asyncio.sleep(1)", "desc": "Define coroutine." },
    { "label": "Run async", "code": "import asyncio\nasyncio.run(main())", "desc": "Run event loop." },
    { "label": "Union types", "code": "from typing import Union\nx: Union[int,str] = 5", "desc": "Multiple types." },
    { "label": "Optional", "code": "from typing import Optional\nx: Optional[int] = None", "desc": "May be None." },
    { "label": "Generic", "code": "from typing import TypeVar, Generic\nT = TypeVar(\"T\")\nclass Box(Generic[T]): ...", "desc": "Generic classes." }
  ]
}
,
  {
    "title": "Rust",
    "items": [
      { "label": "Hello", "code": "fn main() {\n    println!(\"Hello\");\n}", "desc": "Basic program." },
      {
        "label": "Variables",
        "code": "let x = 5;\nlet mut y = 10;\ny += 1;",
        "desc": "Immutable and mutable variables."
      },
      { "label": "Constants", "code": "const PI: f64 = 3.1415;", "desc": "Compile-time constant." },
      {
        "label": "If/else",
        "code": "if x > 0 {\n    println!(\"pos\");\n} else {\n    println!(\"neg\");\n}",
        "desc": "Conditional branch."
      },
      { "label": "Loop", "code": "for i in 0..5 {\n    println!(\"{}\", i);\n}", "desc": "Range-based for loop." },
      { "label": "While loop", "code": "let mut n = 0;\nwhile n < 5 {\n    n += 1;\n}", "desc": "While loop." },
      { "label": "Vec", "code": "let mut v = vec![1, 2, 3];\nv.push(4);", "desc": "Growable vector." },
      { "label": "Array", "code": "let a = [1,2,3];", "desc": "Fixed-size array." },
      { "label": "Tuple", "code": "let t = (1, \"hello\");", "desc": "Fixed-size heterogeneous collection." },
      {
        "label": "HashMap",
        "code": "use std::collections::HashMap;\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);",
        "desc": "Key-value collection."
      },
      { "label": "Function", "code": "fn add(a: i32, b: i32) -> i32 { a + b }", "desc": "Function with return type." },
      { "label": "Multiple return", "code": "fn swap(a:i32,b:i32)->(i32,i32){(b,a)}", "desc": "Return tuple." },
      { "label": "Closure", "code": "let square = |x:i32| x*x;\nlet y = square(5);", "desc": "Anonymous function." },
      {
        "label": "Ownership",
        "code": "let s = String::from(\"hello\");\nlet s2 = s; // s moved",
        "desc": "Move semantics."
      },
      {
        "label": "Borrow",
        "code": "fn len(s: &String) -> usize { s.len() }\nlet l = len(&s);",
        "desc": "Pass by reference."
      },
      {
        "label": "Mutable borrow",
        "code": "fn add_one(s: &mut i32) { *s += 1 }\nlet mut n=5;\nadd_one(&mut n);",
        "desc": "Modify via mutable reference."
      },
      { "label": "Result", "code": "fn do_it() -> Result<(), Box<dyn Error>> { Ok(()) }", "desc": "Error handling." },
      { "label": "Option", "code": "let maybe: Option<i32> = Some(5);", "desc": "Optional value." },
      {
        "label": "Option match",
        "code": "match maybe {\n  Some(x) => x,\n  None => 0\n}",
        "desc": "Pattern match optional."
      },
      {
        "label": "unwrap / expect",
        "code": "let x = maybe.unwrap_or(0);\nlet y = maybe.expect(\"Must have value\");",
        "desc": "Handle Option safely."
      },
      {
        "label": "Struct",
        "code": "struct User { id: i32, name: String }\nlet u = User { id:1, name:\"Alice\".to_string() };",
        "desc": "Define struct and instance."
      },
      {
        "label": "Tuple struct",
        "code": "struct Color(i32,i32,i32);\nlet c = Color(255,0,0);",
        "desc": "Struct with unnamed fields."
      },
      {
        "label": "Enum",
        "code": "enum Direction { Up, Down, Left, Right }\nlet dir = Direction::Up;",
        "desc": "Define enum."
      },
      { "label": "Enum with data", "code": "enum Shape { Circle(f64), Rect(f64,f64) }", "desc": "Enum carrying data." },
      { "label": "Trait", "code": "trait Speak { fn speak(&self); }", "desc": "Define trait." },
      {
        "label": "Implement trait",
        "code": "impl Speak for User {\n  fn speak(&self){ println!(\"{}\", self.name) }\n}",
        "desc": "Implement trait for struct."
      },
      { "label": "Generic function", "code": "fn wrap<T>(x:T)->T { x }", "desc": "Generic type parameter." },
      { "label": "Generic struct", "code": "struct Box<T> { value: T }", "desc": "Generic struct." },
      { "label": "Thread", "code": "use std::thread;\nthread::spawn(|| println!(\"Hi\"));", "desc": "Spawn thread." },
      {
        "label": "Channel",
        "code": "use std::sync::mpsc;\nlet (tx, rx) = mpsc::channel();\ntx.send(42).unwrap();\nlet val = rx.recv().unwrap();",
        "desc": "Send/receive between threads."
      },
      {
        "label": "Module",
        "code": "mod utils { pub fn greet(){ println!(\"Hi\") } }\nutils::greet();",
        "desc": "Define module and call."
      },
      { "label": "Crate", "code": "use serde::Serialize;", "desc": "External package (add to Cargo.toml)." },
      {
        "label": "Read file",
        "code": "use std::fs;\nlet data = fs::read_to_string(\"file.txt\")?;",
        "desc": "Read file as string."
      },
      { "label": "Write file", "code": "fs::write(\"out.txt\",\"hello\")?;", "desc": "Write string to file." }
    ]
  },
  {
      "title": "SQL",
      "items": [
        { "label": "Create table", "code": "CREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  email TEXT UNIQUE NOT NULL,\n  name TEXT,\n  active BOOLEAN DEFAULT true\n);", "desc": "Create a table with constraints." },
        { "label": "Drop table", "code": "DROP TABLE IF EXISTS users;", "desc": "Remove table if exists." },
        { "label": "Alter table", "code": "ALTER TABLE users ADD COLUMN created_at TIMESTAMP DEFAULT NOW();", "desc": "Modify table schema." },
        { "label": "Create index", "code": "CREATE INDEX idx_users_email ON users(email);", "desc": "Speed up queries on column." },
        { "label": "Insert", "code": "INSERT INTO users (email, active, name) VALUES ('a@b.com', true, 'Alice');", "desc": "Add a row." },
        { "label": "Update", "code": "UPDATE users SET active = false WHERE email = 'a@b.com';", "desc": "Modify existing rows." },
        { "label": "Delete", "code": "DELETE FROM users WHERE active = false;", "desc": "Remove rows." },
        { "label": "Select", "code": "SELECT id, email, name FROM users WHERE active = true ORDER BY id DESC LIMIT 10;", "desc": "Retrieve filtered and sorted rows." },
        { "label": "Select all", "code": "SELECT * FROM users;", "desc": "Get all columns." },
        { "label": "Distinct", "code": "SELECT DISTINCT active FROM users;", "desc": "Get unique values." },
        { "label": "Where clause", "code": "SELECT * FROM users WHERE name LIKE 'A%';", "desc": "Filter rows using condition." },
        { "label": "Join", "code": "SELECT u.id, u.name, o.amount FROM users u INNER JOIN orders o ON u.id = o.user_id;", "desc": "Combine tables using JOIN." },
        { "label": "Left join", "code": "SELECT u.id, o.amount FROM users u LEFT JOIN orders o ON u.id = o.user_id;", "desc": "Include all left table rows." },
        { "label": "Count", "code": "SELECT COUNT(*) FROM users WHERE active = true;", "desc": "Count matching rows." },
        { "label": "Sum", "code": "SELECT SUM(amount) FROM orders;", "desc": "Sum column values." },
        { "label": "Avg", "code": "SELECT AVG(amount) FROM orders;", "desc": "Average value." },
        { "label": "Group by", "code": "SELECT active, COUNT(*) FROM users GROUP BY active;", "desc": "Aggregate per group." },
        { "label": "Having", "code": "SELECT active, COUNT(*) FROM users GROUP BY active HAVING COUNT(*) > 5;", "desc": "Filter aggregated results." },
        { "label": "Begin transaction", "code": "BEGIN;", "desc": "Start a transaction." },
        { "label": "Commit", "code": "COMMIT;", "desc": "Save transaction changes." },
        { "label": "Rollback", "code": "ROLLBACK;", "desc": "Undo transaction changes." },
        { "label": "Create view", "code": "CREATE VIEW active_users AS SELECT * FROM users WHERE active = true;", "desc": "Virtual table for query reuse." },
        { "label": "Drop view", "code": "DROP VIEW IF EXISTS active_users;", "desc": "Remove view if exists." },
        { "label": "Limit / Offset", "code": "SELECT * FROM users ORDER BY id LIMIT 10 OFFSET 20;", "desc": "Pagination." }
      ]
    },
    {
      "title": "Web & Frontend",
      "items": [
        { "label": "TypeScript basics", "code": "type User = { id: number; name: string }\ninterface Point { x: number; y: number }\nfunction id<T>(x: T): T { return x }", "desc": "Types, interfaces, generics." },
        { "label": "Arrow functions", "code": "const add = (a: number, b: number) => a + b;", "desc": "Concise function syntax." },
        { "label": "Optional chaining", "code": "const email = user?.profile?.email ?? \"N/A\";", "desc": "Safe property access." },
        { "label": "Array map/filter/reduce", "code": "[1,2,3].map(n => n*2).filter(n => n>2).reduce((a,b)=>a+b,0);", "desc": "Common array operations." },
        { "label": "HTML5 semantics", "code": "<header>...</header>\n<nav>...</nav>\n<main>\n  <section>...</section>\n  <article>...</article>\n</main>\n<footer>...</footer>", "desc": "Use semantic tags for structure & accessibility." },
        { "label": "Forms", "code": "<form>\n  <input type=\"text\" name=\"name\" required />\n  <button type=\"submit\">Submit</button>\n</form>", "desc": "Form with validation." },
        { "label": "Meta / SEO", "code": "<meta name=\"description\" content=\"Dev notes\" />", "desc": "SEO metadata." },
        { "label": "CSS Grid", "code": ".grid-container{display:grid;grid-template-columns:repeat(12,1fr);gap:1rem;}", "desc": "Create responsive grid layout." },
        { "label": "CSS Flexbox", "code": ".flex-row{display:flex;align-items:center;justify-content:space-between;}", "desc": "Align and distribute items." },
        { "label": "Responsive media query", "code": "@media (max-width: 768px) { .container { grid-template-columns: 1fr; } }", "desc": "Adapt layout for smaller screens." },
        { "label": "Tailwind quickies", "code": "Flex center: flex items-center justify-center\nGrid: grid grid-cols-12 gap-4\nBtn: px-4 py-2 rounded bg-blue-600 hover:bg-blue-700 text-white", "desc": "Common utility patterns." },
        { "label": "React component", "code": "function Hello(){ return <h1>Hello</h1>; }", "desc": "Functional component." },
        { "label": "React state", "code": "const [count,setCount] = useState(0);", "desc": "Use state in function component." },
        { "label": "React effect", "code": "useEffect(() => { console.log(\"mounted\") }, []);", "desc": "Run side effect on mount." },
        { "label": "Next.js page", "code": "export default function Home(){ return <div>Home</div> }", "desc": "Basic Next.js page." },
        { "label": "Next.js getStaticProps", "code": "export async function getStaticProps(){ return { props: { data: [] } } }", "desc": "Fetch data at build time." },
        { "label": "Event listener", "code": "document.getElementById(\"btn\")?.addEventListener(\"click\", e => { console.log(\"clicked\"); });", "desc": "Attach click event." },
        { "label": "DOM query", "code": "const el = document.querySelector(\".class\");", "desc": "Select element." },
        { "label": "Create element", "code": "const div = document.createElement(\"div\"); div.textContent = \"Hello\"; document.body.appendChild(div);", "desc": "Dynamically create elements." },
        { "label": "LocalStorage", "code": "localStorage.setItem(\"key\",\"value\"); const val = localStorage.getItem(\"key\");", "desc": "Browser persistent storage." },
        { "label": "SessionStorage", "code": "sessionStorage.setItem(\"key\",\"value\");", "desc": "Temporary browser storage." },
        { "label": "Cookies", "code": "document.cookie = \"name=John; path=/; max-age=3600\";", "desc": "Set cookie." }
      ]
    },
    {
      "title": "Backend & APIs",
      "items": [
        { "label": "Go HTTP", "code": "package main\nimport (\n  \"fmt\"\n  \"net/http\"\n)\nfunc main() {\n  http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request){\n    fmt.Fprintln(w, \"ok\")\n  })\n  http.ListenAndServe(\":8080\", nil)\n}", "desc": "Minimal net/http server." },
        { "label": "Go JSON API", "code": "http.HandleFunc(\"/api\", func(w http.ResponseWriter, r *http.Request){\n  w.Header().Set(\"Content-Type\",\"application/json\")\n  fmt.Fprintln(w, `{\"status\":\"ok\"}`)\n})", "desc": "Return JSON response." },
        { "label": "Go query params", "code": "id := r.URL.Query().Get(\"id\")", "desc": "Read GET parameters." },
        { "label": "Rust axum", "code": "use axum::{routing::get, Router};\n#[tokio::main]\nasync fn main(){\n  let app = Router::new().route(\"/\", get(|| async { \"ok\" }));\n  axum::Server::bind(&\"0.0.0.0:3000\".parse().unwrap()).serve(app.into_make_service()).await.unwrap();\n}", "desc": "Tiny async web server." },
        { "label": "Rust JSON response", "code": "use axum::Json;\nasync fn handler() -> Json<serde_json::Value> {\n  Json(serde_json::json!({\"status\":\"ok\"}))\n}", "desc": "Return JSON from handler." },
        { "label": "Express basic", "code": "const express = require(\"express\");\nconst app = express();\napp.get(\"/\", (req,res)=>res.send(\"ok\"));\napp.listen(3000);", "desc": "Minimal Express server." },
        { "label": "Express JSON", "code": "app.get(\"/api\", (req,res)=>res.json({status:\"ok\"}));", "desc": "Return JSON from endpoint." },
        { "label": "PHP JSON", "code": "<?php\nheader(\"Content-Type: application/json\");\necho json_encode([\"status\" => \"ok\"]);", "desc": "Return JSON response." },
        { "label": "PHP GET param", "code": "<?php\n$id = $_GET[\"id\"] ?? null;", "desc": "Read query parameter." },
        { "label": "Ruby Sinatra", "code": "require \"sinatra\"\nget(\"/\") { \"ok\" }", "desc": "Tiny web route." },
        { "label": "Sinatra JSON", "code": "get(\"/api\") { content_type :json; {status:\"ok\"}.to_json }", "desc": "Return JSON from route." },
        { "label": "Flask basic", "code": "from flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home(): return \"ok\"\napp.run(port=5000)", "desc": "Minimal Flask server." },
        { "label": "Flask JSON", "code": "from flask import jsonify\n@app.route(\"/api\")\ndef api(): return jsonify(status=\"ok\")", "desc": "Return JSON response." },
        { "label": "FastAPI basic", "code": "from fastapi import FastAPI\napp = FastAPI()\n@app.get(\"/\")\ndef read_root(): return {\"status\":\"ok\"}", "desc": "FastAPI JSON response." },
        { "label": "Read query param", "code": "value := r.URL.Query().Get(\"id\") // Go\nreq.query.id // JS\nrequest.args.get(\"id\") // Python", "desc": "Read GET parameters in different languages." },
        { "label": "Read POST JSON", "code": "var data map[string]interface{}\njson.NewDecoder(r.Body).Decode(&data) // Go\nreq.body // JS\nrequest.json() // Python", "desc": "Read POST JSON body." },
        { "label": "CORS header", "code": "w.Header().Set(\"Access-Control-Allow-Origin\", \"*\") // Go\nres.setHeader(\"Access-Control-Allow-Origin\",\"*\") // JS", "desc": "Allow cross-origin requests." }
      ]
    },
    {
      "title": "Mobile",
      "items": [
        { "label": "Kotlin function", "code": "fun greet(name: String): String = \"Hello, $name\"", "desc": "Kotlin expression function." },
        { "label": "Kotlin main", "code": "fun main() {\n  println(\"Hello World\")\n}", "desc": "Basic Kotlin entry point." },
        { "label": "Kotlin class", "code": "class Person(val name: String, var age: Int)", "desc": "Define a class with properties." },
        { "label": "Kotlin data class", "code": "data class User(val id: Int, val name: String)", "desc": "Immutable value object." },
        { "label": "Kotlin list operations", "code": "val nums = listOf(1,2,3).map{ it*2 }.filter{ it>2 }", "desc": "Functional operations on collections." },
        { "label": "Swift basic", "code": "import Foundation\nprint(\"Hello World\")", "desc": "Simple Swift program." },
        { "label": "SwiftUI View", "code": "import SwiftUI\nstruct ContentView: View {\n  var body: some View {\n    Text(\"Hello\").padding()\n  }\n}", "desc": "Minimal SwiftUI component." },
        { "label": "Swift struct", "code": "struct User { let id: Int; var name: String }", "desc": "Define struct with properties." },
        { "label": "Swift optional", "code": "var name: String? = nil\nprint(name ?? \"N/A\")", "desc": "Handle optional values safely." },
        { "label": "SwiftUI Button", "code": "Button(\"Click Me\") {\n  print(\"Pressed\")\n}", "desc": "Interactive UI element." },
        { "label": "Flutter widget", "code": "class Hello extends StatelessWidget {\n  @override\n  Widget build(BuildContext ctx) => Text(\"Hello\");\n}", "desc": "StatelessWidget example." },
        { "label": "Flutter StatefulWidget", "code": "class Counter extends StatefulWidget {\n  @override\n  _CounterState createState() => _CounterState();\n}\nclass _CounterState extends State<Counter> {\n  int count = 0;\n  @override\n  Widget build(BuildContext ctx) => ElevatedButton(\n    onPressed: () => setState(() => count++),\n    child: Text(\"Count: $count\"),\n  );\n}", "desc": "Interactive stateful widget." },
        { "label": "Flutter Scaffold", "code": "Scaffold(appBar: AppBar(title: Text(\"App\")), body: Center(child: Text(\"Hello\")))", "desc": "Basic page layout." },
        { "label": "Flutter ListView", "code": "ListView.builder(itemCount: items.length, itemBuilder: (_,i)=>Text(items[i]))", "desc": "Dynamic scrollable list." },
        { "label": "Flutter routing", "code": "Navigator.push(context, MaterialPageRoute(builder: (_) => NextPage()));", "desc": "Navigate between pages." }
      ]
    },
    {
      "title": "Data & Machine Learning",
      "items": [
        { "label": "R dplyr filter/group/summarise", "code": "library(dplyr)\nmtcars %>% filter(mpg > 20) %>% group_by(cyl) %>% summarise(avg = mean(mpg))", "desc": "Filter, group, summarise." },
        { "label": "R mutate", "code": "mtcars %>% mutate(mpg2 = mpg*2)", "desc": "Add new column." },
        { "label": "R ggplot", "code": "library(ggplot2)\nggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()", "desc": "Scatter plot." },
        { "label": "Julia basics", "code": "f(x) = x^2\nxs = [1,2,3]\nys = f.(xs)", "desc": "Function and broadcasting." },
        { "label": "Julia DataFrame", "code": "using DataFrames\ndf = DataFrame(A=1:3, B=4:6)", "desc": "Create a dataframe." },
        { "label": "Julia plot", "code": "using Plots\nplot([1,2,3],[4,5,6], label=\"line\")", "desc": "Basic plot." },
        { "label": "MATLAB plot", "code": "x = 0:0.1:10; y = sin(x);\nplot(x,y); grid on; title(\"Sine\");", "desc": "Plot in MATLAB/Octave." },
        { "label": "MATLAB matrix", "code": "A = [1 2; 3 4]; B = A*2;", "desc": "Matrix operations." },
        { "label": "MATLAB for loop", "code": "for i=1:5\n disp(i)\nend", "desc": "Iterate with for loop." },
        { "label": "NumPy array", "code": "import numpy as np\narr = np.array([1,2,3])\narr2 = arr*2", "desc": "Vectorized operations." },
        { "label": "Pandas DataFrame", "code": "import pandas as pd\ndf = pd.DataFrame({\"A\":[1,2,3],\"B\":[4,5,6]})", "desc": "Tabular data." },
        { "label": "Pandas filter/groupby", "code": "df[df.A>1].groupby(\"B\").sum()", "desc": "Filter and aggregate." },
        { "label": "Matplotlib plot", "code": "import matplotlib.pyplot as plt\nplt.plot([1,2,3],[4,5,6]); plt.show()", "desc": "Basic Python plot." },
        { "label": "Seaborn scatter", "code": "import seaborn as sns\nsns.scatterplot(data=df, x=\"A\", y=\"B\")", "desc": "Enhanced visualization." },
        { "label": "Scikit-learn train/test split", "code": "from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)", "desc": "Split dataset." },
        { "label": "Scikit-learn model fit", "code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X_train,y_train)", "desc": "Train model." },
        { "label": "Scikit-learn predict", "code": "y_pred = model.predict(X_test)", "desc": "Make predictions." },
        { "label": "TensorFlow basic", "code": "import tensorflow as tf\nmodel = tf.keras.Sequential([tf.keras.layers.Dense(1)])\nmodel.compile(optimizer=\"adam\", loss=\"mse\")", "desc": "Build simple neural network." },
        { "label": "PyTorch tensor", "code": "import torch\nt = torch.tensor([1.0,2.0,3.0])", "desc": "Basic tensor." }
      ]
    },
    {
      "title": "Systems & Scripting",
      "items": [
        { "label": "Bash find/grep", "code": "find . -type f -name \"*.js\" -print0 | xargs -0 grep -n \"pattern\"", "desc": "Search text in files." },
        { "label": "List files", "code": "ls -la", "desc": "List files with details, including hidden." },
        { "label": "Copy / Move / Remove", "code": "cp src dest\nmv old new\nrm -rf folder/", "desc": "File operations." },
        { "label": "Pipe and redirect", "code": "cat file | grep \"pattern\" > output.txt", "desc": "Combine commands and redirect output." },
        { "label": "Permissions", "code": "chmod +x script.sh\nchown user:group file", "desc": "Change file permissions/ownership." },
        { "label": "C Hello", "code": "#include <stdio.h>\nint main(void){ printf(\"Hello\\n\"); return 0; }", "desc": "Smallest C program." },
        { "label": "C compile/run", "code": "gcc main.c -o main\n./main", "desc": "Compile and execute C program." },
        { "label": "C pointers", "code": "int x = 10;\nint *p = &x;\nprintf(\"%d\", *p);", "desc": "Pointer usage." },
        { "label": "C++ vector", "code": "#include <vector>\n#include <algorithm>\nint main(){ std::vector<int> v{1,2,3}; std::for_each(v.begin(), v.end(), [](int &x){ x*=2; }); }", "desc": "STL and lambda." },
        { "label": "C++ class", "code": "class Person { public: std::string name; int age; };", "desc": "Define class." },
        { "label": "C++ smart pointer", "code": "std::unique_ptr<int> p = std::make_unique<int>(5);", "desc": "Manage memory automatically." },
        { "label": "x86-64 asm exit", "code": "global _start\n_start:\n  mov rax, 60 ; exit\n  xor rdi, rdi\n  syscall", "desc": "Linux exit syscall." },
        { "label": "x86-64 asm write", "code": "mov rax, 1 ; sys_write\nmov rdi, 1 ; stdout\nmov rsi, msg\nmov rdx, len\nsyscall", "desc": "Write string to stdout." },
        { "label": "Python script", "code": "print(\"Hello World\")", "desc": "Basic Python script." },
        { "label": "Python args", "code": "import sys\nprint(sys.argv)", "desc": "Command-line arguments." },
        { "label": "Python file IO", "code": "with open(\"file.txt\") as f:\n  data = f.read()", "desc": "Read file content." },
        { "label": "Cron job", "code": "0 0 * * * /path/to/script.sh", "desc": "Schedule script daily at midnight." },
        { "label": "Environment variables", "code": "export PATH=$PATH:/my/bin", "desc": "Set env variable in shell." },
        { "label": "SSH", "code": "ssh user@host", "desc": "Remote login." },
        { "label": "Tar / Zip", "code": "tar -czf archive.tgz folder/\nzip -r archive.zip folder/", "desc": "Compress files." }
      ]
    },
  {
  "title": "Java",
  "items": [
    { "label": "Hello World", "code": "public class Hello {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}", "desc": "Basic Java program." },
    { "label": "Variables", "code": "int x = 10;\nString name = \"Java\";\nfinal double PI = 3.14159;", "desc": "Variable declarations with types." },
    { "label": "Array", "code": "int[] numbers = {1, 2, 3, 4, 5};\nString[] names = new String[3];", "desc": "Array declaration and initialization." },
    { "label": "ArrayList", "code": "import java.util.ArrayList;\nArrayList<String> list = new ArrayList<>();\nlist.add(\"item\");\nlist.get(0);", "desc": "Dynamic array with generics." },
    { "label": "HashMap", "code": "import java.util.HashMap;\nHashMap<String, Integer> map = new HashMap<>();\nmap.put(\"key\", 42);\nint value = map.get(\"key\");", "desc": "Key-value mapping." },
    { "label": "For loop", "code": "for (int i = 0; i < 10; i++) {\n  System.out.println(i);\n}", "desc": "Traditional for loop." },
    { "label": "Enhanced for", "code": "for (String item : list) {\n  System.out.println(item);\n}", "desc": "For-each loop over collections." },
    { "label": "Method", "code": "public static int add(int a, int b) {\n  return a + b;\n}", "desc": "Method with parameters and return type." },
    { "label": "Class", "code": "public class Person {\n  private String name;\n  private int age;\n  \n  public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  public String getName() { return name; }\n}", "desc": "Class with constructor and getter." },
    { "label": "Inheritance", "code": "public class Student extends Person {\n  private String school;\n  \n  public Student(String name, int age, String school) {\n    super(name, age);\n    this.school = school;\n  }\n}", "desc": "Class inheritance with super." },
    { "label": "Interface", "code": "public interface Drawable {\n  void draw();\n  default void print() { System.out.println(\"Drawing\"); }\n}", "desc": "Interface with abstract and default methods." },
    { "label": "Abstract Class", "code": "public abstract class Shape {\n  abstract double area();\n}", "desc": "Base class with abstract method." },
    { "label": "Lambda", "code": "List<String> names = Arrays.asList(\"Alice\", \"Bob\");\nnames.forEach(name -> System.out.println(name));", "desc": "Lambda expression with forEach." },
    { "label": "Stream API", "code": "List<Integer> evens = numbers.stream()\n  .filter(n -> n % 2 == 0)\n  .collect(Collectors.toList());", "desc": "Functional programming with streams." },
    { "label": "Optional", "code": "Optional<String> optional = Optional.ofNullable(getValue());\noptional.ifPresent(System.out::println);\nString result = optional.orElse(\"default\");", "desc": "Handle nullable values safely." },
    { "label": "Thread", "code": "Thread t = new Thread(() -> System.out.println(\"Running\"));\nt.start();", "desc": "Create and start a thread." },
    { "label": "ExecutorService", "code": "ExecutorService ex = Executors.newFixedThreadPool(2);\nex.submit(() -> System.out.println(\"Task\"));\nex.shutdown();", "desc": "Manage thread pool." },
    { "label": "File I/O", "code": "BufferedReader br = new BufferedReader(new FileReader(\"file.txt\"));\nString line = br.readLine();\nbr.close();", "desc": "Read file line by line." },
    { "label": "NIO Files", "code": "Path path = Paths.get(\"file.txt\");\nList<String> lines = Files.readAllLines(path);", "desc": "Read entire file using NIO." },
    { "label": "Socket", "code": "Socket s = new Socket(\"localhost\", 8080);", "desc": "Create TCP connection." },
    { "label": "URL", "code": "URL url = new URL(\"https://example.com\");\nURLConnection conn = url.openConnection();", "desc": "Open URL connection." },
    { "label": "Reflection", "code": "Class<?> cls = Class.forName(\"Person\");\nMethod m = cls.getMethod(\"getName\");", "desc": "Access class metadata." },
    { "label": "Enum", "code": "enum Direction { UP, DOWN, LEFT, RIGHT }", "desc": "Define enum constants." },
    { "label": "Annotation", "code": "@Override\npublic String toString() { return \"Hello\"; }", "desc": "Mark method overrides." },
    { "label": "Generics", "code": "public class Box<T> {\n  private T value;\n  public void set(T value) { this.value = value; }\n  public T get() { return value; }\n}", "desc": "Generic class example." },
    { "label": "Math Utils", "code": "Math.max(5,10);\nMath.min(3,7);\nMath.random();", "desc": "Math class utilities." },
    { "label": "Collections Utils", "code": "Collections.sort(list);\nCollections.reverse(list);\nCollections.shuffle(list);", "desc": "Helper methods for collections." },
    { "label": "Arrays Utils", "code": "Arrays.sort(numbers);\nArrays.asList(numbers);", "desc": "Array helper methods." },
    { "label": "Date & Time", "code": "LocalDate today = LocalDate.now();\nLocalDateTime dt = LocalDateTime.now();", "desc": "Modern date/time API." },
    { "label": "Try/Catch", "code": "try {\n  int a = 1/0;\n} catch(ArithmeticException e) {\n  e.printStackTrace();\n}", "desc": "Exception handling." },
    { "label": "Throw", "code": "throw new IllegalArgumentException(\"Error\");", "desc": "Throw exception manually." }
  ]
},
{
      "title": "C#",
      "items": [
        { "label": "Hello World", "code": "using System;\nclass Program { static void Main() { Console.WriteLine(\"Hello World\"); } }", "desc": "Basic C# program." },
        { "label": "Variables", "code": "int x = 10; string name = \"C#\"; var auto = \"inferred type\"; const double PI = 3.14159;", "desc": "Variable declarations and type inference." },
        { "label": "Array & List", "code": "int[] numbers = {1,2,3};\nList<string> names = new List<string> {\"Alice\", \"Bob\"};", "desc": "Arrays and generic lists." },
        { "label": "Dictionary", "code": "Dictionary<string,int> ages = new Dictionary<string,int>{{\"Alice\",25},{\"Bob\",30}};", "desc": "Key-value collections." },
        { "label": "Method", "code": "public static int Add(int a,int b) => a+b;", "desc": "Function with parameters and return type." },
        { "label": "Class", "code": "public class Person { public string Name { get; set; } public int Age { get; private set; } public Person(string name,int age){Name=name;Age=age;} }", "desc": "Class with auto-properties and constructor." },
        { "label": "Interface", "code": "public interface IDrawable { void Draw(); }", "desc": "Interface declaration." },
        { "label": "Inheritance", "code": "class Student : Person { public string School { get; set; } }", "desc": "Subclassing with inheritance." },
        { "label": "LINQ", "code": "var evens = numbers.Where(n => n % 2 == 0).ToList();", "desc": "Query collections with LINQ." },
        { "label": "Async/Await", "code": "public async Task<string> GetDataAsync(){ return await Task.FromResult(\"Data\"); }", "desc": "Asynchronous programming." },
        { "label": "Exception handling", "code": "try { var result = Divide(10,0); } catch(DivideByZeroException e) { Console.WriteLine(e.Message); } finally { Console.WriteLine(\"Cleanup\"); }", "desc": "Try-catch-finally pattern." },
        { "label": "Nullable types", "code": "int? nullable = null; string? name = null;", "desc": "Nullable value and reference types." },
        { "label": "Record", "code": "public record Person(string Name,int Age);", "desc": "Immutable record types." },
        { "label": "Extension method", "code": "public static class StringExt { public static bool IsEmpty(this string str)=>string.IsNullOrEmpty(str); }", "desc": "Extend existing types with new methods." }
      ]
    },
    {
      "title": "PHP",
      "items": [
        { "label": "Hello World", "code": "<?php echo \"Hello World\"; ?>", "desc": "Basic PHP script." },
        { "label": "Variables", "code": "$name=\"PHP\";$age=25;$pi=3.14159;define('CONSTANT','value');", "desc": "Variables and constants." },
        { "label": "Arrays", "code": "$fruits=[\"apple\",\"banana\",\"orange\"];$person=['name'=>'Alice','age'=>30];", "desc": "Indexed and associative arrays." },
        { "label": "Functions", "code": "function greet($name='World'){return 'Hello '.$name;} $add=function($a,$b){return $a+$b;};", "desc": "Functions and anonymous functions." },
        { "label": "Classes", "code": "class Person{private $name;public $age;function __construct($name,$age){$this->name=$name;$this->age=$age;} function getName(){return $this->name;}}", "desc": "Class with constructor and methods." },
        { "label": "Inheritance", "code": "class Student extends Person{private $school; function __construct($name,$age,$school){parent::__construct($name,$age);$this->school=$school;}}", "desc": "Class inheritance." },
        { "label": "Loops", "code": "for($i=0;$i<10;$i++){echo $i;} foreach($fruits as $fruit){echo $fruit;}", "desc": "For and foreach loops." },
        { "label": "Conditionals", "code": "if($age>=18){echo 'Adult';} elseif($age>=13){echo 'Teen';} else{echo 'Child';}", "desc": "If-elseif-else statements." },
        { "label": "Include/Require", "code": "include 'header.php'; require_once 'config.php';", "desc": "Include external files." },
        { "label": "Database (PDO)", "code": "$pdo=new PDO('mysql:host=localhost;dbname=test',$user,$pass);", "desc": "Database access using PDO." },
        { "label": "JSON", "code": "$array=['name'=>'Alice','age'=>30];$json=json_encode($array);$decoded=json_decode($json,true);", "desc": "Encode and decode JSON." },
        { "label": "Exception handling", "code": "try{ riskyOperation(); } catch(Exception $e){echo $e->getMessage();} finally{cleanup();}", "desc": "Try-catch-finally." }
      ]
    },
    {
      "title": "Ruby",
      "items": [
        { "label": "Hello World", "code": "puts \"Hello World\"", "desc": "Basic output." },
        { "label": "Variables", "code": "name='Ruby';age=25;PI=3.14159;@instance_var='instance';@@class_var='class';", "desc": "Variables and constants." },
        { "label": "Arrays", "code": "fruits=['apple','banana','orange'];fruits<<'grape';fruits.push('kiwi');first=fruits[0];", "desc": "Array operations." },
        { "label": "Hashes", "code": "person={name:'Alice',age:30};name=person[:name];", "desc": "Hash usage." },
        { "label": "Methods", "code": "def greet(name='World');'Hello #{name}';end", "desc": "Method with default parameter." },
        { "label": "Classes", "code": "class Person; attr_accessor :name,:age; def initialize(name,age);@name=name;@age=age;end; end", "desc": "Class definition with constructor." },
        { "label": "Inheritance", "code": "class Student < Person; attr_accessor :school; def initialize(name,age,school);super(name,age);@school=school;end; end", "desc": "Subclassing with inheritance." },
        { "label": "Blocks", "code": "[1,2,3].each{|n| puts n}", "desc": "Block iterator." }
      ]
    },
  {
    "title": "Scala",
    "items": [
      { "label": "Hello World", "code": "object HelloWorld { def main(args: Array[String]): Unit = { println(\"Hello World\") } }", "desc": "Basic Scala program." },
      { "label": "Variables", "code": "val immutable = \"cannot change\"\nvar mutable = \"can change\"\nlazy val computed = expensiveOperation()", "desc": "Immutable, mutable, and lazy values." },
      { "label": "Functions", "code": "def add(a: Int, b: Int): Int = a + b\nval multiply = (a: Int, b: Int) => a * b\ndef greet(name: String = \"World\"): String = s\"Hello $name\"", "desc": "Function definitions and lambda expressions." },
      { "label": "Case classes", "code": "case class Person(name: String, age: Int)\nval alice = Person(\"Alice\", 30)\nval older = alice.copy(age = 31)", "desc": "Immutable data structures." },
      { "label": "Pattern matching", "code": "def describe(x: Any): String = x match {\n  case 1 => \"one\"\n  case \"hello\" => \"greeting\"\n  case Person(name, _) => s\"Person named $name\"\n  case _ => \"something else\"\n}", "desc": "Pattern matching with case expressions." },
      { "label": "Collections", "code": "val list = List(1, 2, 3)\nval doubled = list.map(_ * 2)\nval evens = list.filter(_ % 2 == 0)\nval sum = list.reduce(_ + _)", "desc": "Immutable collections and operations." },
      { "label": "Option", "code": "val maybeValue: Option[String] = Some(\"hello\")\nval result = maybeValue match { case Some(value) => value.toUpperCase case None => \"default\" }\nval length = maybeValue.map(_.length).getOrElse(0)", "desc": "Handle optional values safely." },
      { "label": "For comprehensions", "code": "val numbers = List(1, 2, 3)\nval letters = List('a', 'b')\nval combinations = for { n <- numbers; l <- letters } yield s\"$n$l\"", "desc": "Syntactic sugar for map/flatMap/filter." },
      { "label": "Classes", "code": "class Counter(private var count: Int = 0) { def increment(): Unit = count += 1; def current: Int = count }\nval counter = new Counter(); counter.increment()", "desc": "Class with private state and methods." },
      { "label": "Traits", "code": "trait Drawable { def draw(): String }\ntrait Colored { def color: String = \"black\" }\nclass Circle extends Drawable with Colored { def draw(): String = s\"Drawing a $color circle\" }", "desc": "Mixins with traits." },
      { "label": "Higher-order functions", "code": "def applyTwice[A](f: A => A)(x: A): A = f(f(x))\nval increment = (x: Int) => x + 1\nval result = applyTwice(increment)(5)", "desc": "Functions that take or return functions." },
      { "label": "Implicits", "code": "implicit class StringOps(s: String) { def isPalindrome: Boolean = s == s.reverse }\nval result = \"racecar\".isPalindrome", "desc": "Extend existing types with implicit classes." },
      { "label": "Future", "code": "import scala.concurrent.Future\nimport scala.concurrent.ExecutionContext.Implicits.global\nval future = Future { Thread.sleep(1000); \"Hello from future\" }\nfuture.foreach(println)", "desc": "Asynchronous programming with Futures." },
      { "label": "Try", "code": "import scala.util.{Try, Success, Failure}\nval result = Try { \"10\".toInt }\nresult match { case Success(value) => println(s\"Got $value\") case Failure(exception) => println(s\"Failed: $exception\") }", "desc": "Exception handling with Try." },
      { "label": "Type parameters", "code": "class Box[T](value: T) { def get: T = value; def map[U](f: T => U): Box[U] = new Box(f(value)) }\nval intBox = new Box(42)\nval stringBox = intBox.map(_.toString)", "desc": "Generic types and methods." }
    ]
  },
  {
    "title": "Dart",
    "items": [
      { "label": "Hello World", "code": "void main() { print('Hello World'); }", "desc": "Basic Dart program." },
      { "label": "Variables", "code": "var name = 'Dart'; String title = 'Developer'; int age = 25; double pi = 3.14159; bool isActive = true; final constant = 'cannot change'; const compileTime = 42;", "desc": "Variable declarations and types." },
      { "label": "Functions", "code": "String greet(String name, {String title = 'World'}) { return 'Hello $title $name'; } int add(int a, int b) => a + b; void log(String message, [String? level]) { print('$level: $message'); }", "desc": "Function definitions with named and optional parameters." },
      { "label": "Lists", "code": "List<String> fruits = ['apple', 'banana', 'orange']; fruits.add('grape'); var numbers = <int>[1, 2, 3]; var doubled = numbers.map((n) => n * 2).toList();", "desc": "List operations and transformations." },
      { "label": "Maps", "code": "Map<String, int> ages = { 'Alice': 30, 'Bob': 25, }; ages['Charlie'] = 35; var keys = ages.keys.toList();", "desc": "Map (dictionary) usage." },
      { "label": "Classes", "code": "class Person { String name; int age; Person(this.name, this.age); Person.guest() : name = 'Guest', age = 0; void greet() { print('Hi, I\\'m $name'); } }", "desc": "Class with constructors and methods." },
      { "label": "Inheritance", "code": "class Student extends Person { String school; Student(String name, int age, this.school) : super(name, age); @override void greet() { super.greet(); print('I study at $school'); } }", "desc": "Class inheritance with method overriding." },
      { "label": "Mixins", "code": "mixin Flyable { void fly() { print('Flying!'); } } class Bird with Flyable { String name; Bird(this.name); }", "desc": "Code reuse with mixins." },
      { "label": "Async/Await", "code": "Future<String> fetchData() async { await Future.delayed(Duration(seconds: 1)); return 'Data loaded'; } void main() async { var data = await fetchData(); print(data); }", "desc": "Asynchronous programming." },
      { "label": "Streams", "code": "Stream<int> countStream() async* { for (int i = 1; i <= 5; i++) { await Future.delayed(Duration(seconds: 1)); yield i; } } void main() async { await for (int value in countStream()) { print(value); } }", "desc": "Asynchronous data streams." },
      { "label": "Null safety", "code": "String? nullable = null; String nonNull = 'Hello'; int? length = nullable?.length; String result = nullable ?? 'default'; nonNull ??= 'fallback';", "desc": "Handle nullable types safely." },
      { "label": "Extension methods", "code": "extension StringExtensions on String { bool get isEmail => contains('@'); String capitalize() => '${this[0].toUpperCase()}${substring(1)}'; } void main() { print('hello'.capitalize()); print('user@example.com'.isEmail); }", "desc": "Extend existing classes with new functionality." },
      { "label": "Generics", "code": "class Box<T> { T value; Box(this.value); T getValue() => value; } Box<int> intBox = Box(42); Box<String> stringBox = Box('hello');", "desc": "Generic types for type safety." },
      { "label": "Exception handling", "code": "try { var result = int.parse('not a number'); } on FormatException catch (e) { print('Format error: ${e.message}'); } catch (e) { print('Unknown error: $e'); } finally { print('Cleanup'); }", "desc": "Try-catch-finally with specific exceptions." },
      { "label": "Enums", "code": "enum Status { pending, approved, rejected } void handleStatus(Status status) { switch (status) { case Status.pending: print('Waiting...'); break; case Status.approved: print('Success!'); break; case Status.rejected: print('Denied'); break; } }", "desc": "Enumerated types with switch statements." }
    ]
  },
  {
    "title": "Go",
    "items": [
      { "label": "Hello World", "code": "package main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}", "desc": "Basic Go program." },
      { "label": "Variables", "code": "var name string = \"Go\"\nage := 25\nconst PI = 3.14159", "desc": "Variable declarations and constants." },
      { "label": "Function", "code": "func add(a, b int) int { return a + b }", "desc": "Function with parameters and return type." },
      { "label": "Multiple returns", "code": "func divide(a, b float64) (float64, error) { if b == 0 { return 0, errors.New(\"division by zero\") } return a / b, nil }", "desc": "Function returning multiple values." },
      { "label": "Struct", "code": "type Person struct { Name string; Age  int }\np := Person{Name: \"Alice\", Age: 30}", "desc": "Define and initialize struct." },
      { "label": "Method", "code": "func (p Person) Greet() string { return \"Hello, \" + p.Name }", "desc": "Method on struct." },
      { "label": "Pointer", "code": "func (p *Person) SetAge(age int) { p.Age = age }", "desc": "Pointer receiver method." },
      { "label": "Interface", "code": "type Writer interface { Write([]byte) (int, error) }", "desc": "Define interface." },
      { "label": "Slice", "code": "nums := []int{1, 2, 3}\nnums = append(nums, 4)", "desc": "Dynamic array operations." },
      { "label": "Map", "code": "m := make(map[string]int)\nm[\"key\"] = 42\nvalue, ok := m[\"key\"]", "desc": "Hash map operations." },
      { "label": "For loop", "code": "for i := 0; i < 10; i++ { fmt.Println(i) }\nfor key, value := range m { fmt.Println(key, value) }", "desc": "Loop variations." },
      { "label": "If statement", "code": "if x > 0 { fmt.Println(\"positive\") } else if x < 0 { fmt.Println(\"negative\") } else { fmt.Println(\"zero\") }", "desc": "Conditional statements." },
      { "label": "Switch", "code": "switch day { case \"Monday\": fmt.Println(\"Start of work week\") default: fmt.Println(\"Other day\") }", "desc": "Switch statement." },
      { "label": "Goroutine", "code": "go func() { fmt.Println(\"Running in goroutine\") }()", "desc": "Concurrent execution." },
      { "label": "Channel", "code": "ch := make(chan int)\ngo func() { ch <- 42 }()\nvalue := <-ch", "desc": "Communication between goroutines." },
      { "label": "Error handling", "code": "if err != nil { log.Fatal(err) }", "desc": "Standard error handling pattern." },
      { "label": "JSON marshal", "code": "import \"encoding/json\"\ndata, err := json.Marshal(person)", "desc": "Convert struct to JSON." },
      { "label": "JSON unmarshal", "code": "var person Person\nerr := json.Unmarshal(data, &person)", "desc": "Parse JSON into struct." },
      { "label": "HTTP server", "code": "http.HandleFunc(\"/\", handler)\nlog.Fatal(http.ListenAndServe(\":8080\", nil))", "desc": "Basic HTTP server." },
      { "label": "HTTP client", "code": "resp, err := http.Get(\"https://api.example.com\")\ndefer resp.Body.Close()", "desc": "Make HTTP request." }
    ]
  },
{
  "title": "Flutter",
  "items": [
    { "label": "Create project", "code": "flutter create my_app", "desc": "Naya Flutter project banata hai." },
    { "label": "Run app", "code": "flutter run", "desc": "App ko connected device/emulator par chalata hai." },
    { "label": "Run on specific device", "code": "flutter run -d emulator-5554", "desc": "App ko specific device ID par run karta hai." },
    { "label": "List devices", "code": "flutter devices", "desc": "Available connected devices list karta hai." },
    { "label": "Build APK", "code": "flutter build apk --release", "desc": "Release mode me Android APK generate karta hai." },
    { "label": "Build iOS", "code": "flutter build ios", "desc": "Release mode me iOS build create karta hai (macOS required)." },
    { "label": "Check environment", "code": "flutter doctor", "desc": "System configuration aur dependencies check karta hai." },
    { "label": "Upgrade Flutter", "code": "flutter upgrade", "desc": "Flutter SDK ko latest version me upgrade karta hai." },
    { "label": "Clean project", "code": "flutter clean", "desc": "Build files delete karke project fresh state me lata hai." },
    { "label": "Run tests", "code": "flutter test", "desc": "Flutter unit aur widget tests run karta hai." },
    
    { "label": "Scaffold", "code": "Scaffold(appBar: AppBar(title: Text('App')), body: Center(child: Text('Hello')))", "desc": "App ka basic structure provide karta hai with AppBar, Drawer, FAB etc." },
    { "label": "Container", "code": "Container(padding: EdgeInsets.all(16), color: Colors.blue)", "desc": "Box widget jo styling, padding aur background color support karta hai." },
    { "label": "Row", "code": "Row(children: [Text('A'), Text('B')])", "desc": "Widgets ko horizontal line me arrange karta hai." },
    { "label": "Column", "code": "Column(children: [Text('A'), Text('B')])", "desc": "Widgets ko vertical line me arrange karta hai." },
    { "label": "Stack", "code": "Stack(children: [Text('Back'), Positioned(child: Text('Front'))])", "desc": "Widgets ko ek dusre ke upar stack karta hai." },
    { "label": "ListView", "code": "ListView(children: [Text('Item1'), Text('Item2')])", "desc": "Scrollable vertical list banata hai." },
    { "label": "GridView", "code": "GridView.count(crossAxisCount: 2, children: [...])", "desc": "Scrollable grid layout banata hai." },
    { "label": "Expanded", "code": "Expanded(child: Container(color: Colors.red))", "desc": "Available extra space occupy karta hai within Row/Column." },
    { "label": "SizedBox", "code": "SizedBox(height: 20)", "desc": "Fixed height/width space provide karta hai." },

    { "label": "TextField", "code": "TextField(controller: myController)", "desc": "User input ke liye editable text box." },
    { "label": "Form", "code": "Form(child: Column(children:[TextFormField(), ElevatedButton(onPressed: save)]))", "desc": "Group of input fields jisme validation support hota hai." },
    { "label": "DropdownButton", "code": "DropdownButton(items: [...], onChanged: (v) {})", "desc": "Dropdown selection field." },
    { "label": "Checkbox", "code": "Checkbox(value: true, onChanged: (v) {})", "desc": "True/false toggle input widget." },
    { "label": "Radio", "code": "Radio(value: 1, groupValue: selected, onChanged: (v) {})", "desc": "Group me ek option select karne ke liye radio button." },
    { "label": "Switch", "code": "Switch(value: true, onChanged: (v) {})", "desc": "On/Off toggle widget." },
    { "label": "Slider", "code": "Slider(value: 0.5, onChanged: (v) {})", "desc": "Numeric range select karne ke liye slider." },

    { "label": "Push", "code": "Navigator.push(context, MaterialPageRoute(builder: (_) => NewPage()))", "desc": "Naya page stack me add karta hai." },
    { "label": "Pop", "code": "Navigator.pop(context)", "desc": "Current page ko stack se remove karke pichle page par jata hai." },
    { "label": "PushReplacement", "code": "Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => Home()))", "desc": "Current page replace karke naya page show karta hai." },
    { "label": "Named Routes", "code": "Navigator.pushNamed(context, '/about')", "desc": "Predefined route name se navigation karta hai." },
    { "label": "Navigator 2.0", "code": "Router(...)", "desc": "Declarative routing system for advanced navigation." },

    { "label": "setState", "code": "setState(() { counter++; });", "desc": "Widget tree ko rebuild karta hai jab data change hota hai." },
    { "label": "InheritedWidget", "code": "class MyInherited extends InheritedWidget { ... }", "desc": "Widget tree ke through data propagate karne ka tarika." },
    { "label": "Provider", "code": "ChangeNotifierProvider(create: (_) => Counter())", "desc": "State management ke liye widely used package." },
    { "label": "Riverpod", "code": "final counterProvider = StateProvider((ref) => 0);", "desc": "Modern, safer state management package." },
    { "label": "Bloc", "code": "BlocProvider(create: (_) => CounterBloc())", "desc": "Business logic ko separate karne ke liye Bloc pattern." },

    { "label": "http get", "code": "var res = await http.get(Uri.parse(url));", "desc": "GET request bhejta hai aur response lata hai." },
    { "label": "http post", "code": "var res = await http.post(Uri.parse(url), body: {...});", "desc": "POST request data ke sath send karta hai." },
    { "label": "Dio", "code": "var dio = Dio(); var res = await dio.get(url);", "desc": "Advanced networking library with interceptors and retries." },
    { "label": "FutureBuilder", "code": "FutureBuilder(future: fetch(), builder: (c, s){...})", "desc": "Async data ke sath UI build karta hai." },

    { "label": "SharedPreferences", "code": "prefs = await SharedPreferences.getInstance();\nprefs.setString('key','value');", "desc": "Key-value storage for small data." },
    { "label": "Hive", "code": "var box = await Hive.openBox('myBox');\nbox.put('key','value');", "desc": "Fast local NoSQL storage." },
    { "label": "SQLite (sqflite)", "code": "await db.insert('table', {'name': 'hi'});", "desc": "Relational database storage." },

    { "label": "AnimatedContainer", "code": "AnimatedContainer(duration: Duration(seconds:1), color: Colors.red)", "desc": "Implicit animation for properties like size, color, padding." },
    { "label": "Hero", "code": "Hero(tag: 'hero', child: Image.asset('a.png'))", "desc": "Page transitions ke beech shared element animation." },
    { "label": "AnimationController", "code": "AnimationController(vsync: this, duration: Duration(seconds:1))", "desc": "Custom animations ke liye controller." },
    { "label": "FadeTransition", "code": "FadeTransition(opacity: animation, child: child)", "desc": "Widget ke liye fade-in/out animation." }
  ]
},
{
  "title": "PostgreSQL",
  "items": [
    { "label": "Connect DB", "code": "psql -h host -U user -d dbname", "desc": "Connect to PostgreSQL database." },
    { "label": "List databases", "code": "\\l", "desc": "Show all databases." },
    { "label": "Connect database", "code": "\\c dbname", "desc": "Connect to a specific database." },
    { "label": "List tables", "code": "\\dt", "desc": "Show all tables in current database." },
    { "label": "Describe table", "code": "\\d tablename", "desc": "Show table schema." },
    { "label": "Create database", "code": "CREATE DATABASE mydb;", "desc": "Create a new database." },
    { "label": "Drop database", "code": "DROP DATABASE mydb;", "desc": "Delete a database." },
    { "label": "Create table", "code": "CREATE TABLE users(id SERIAL PRIMARY KEY, name TEXT, age INT);", "desc": "Create a new table." },
    { "label": "Drop table", "code": "DROP TABLE users;", "desc": "Delete a table." },
    { "label": "Insert data", "code": "INSERT INTO users(name, age) VALUES('Alice', 25);", "desc": "Insert a row." },
    { "label": "Insert multiple", "code": "INSERT INTO users(name, age) VALUES('Bob',30),('Charlie',28);", "desc": "Insert multiple rows." },
    { "label": "Select all", "code": "SELECT * FROM users;", "desc": "Fetch all rows." },
    { "label": "Select with condition", "code": "SELECT * FROM users WHERE age > 25;", "desc": "Fetch rows matching condition." },
    { "label": "Update row", "code": "UPDATE users SET age=26 WHERE name='Alice';", "desc": "Update data in table." },
    { "label": "Delete row", "code": "DELETE FROM users WHERE name='Alice';", "desc": "Delete data from table." },
    { "label": "Order by", "code": "SELECT * FROM users ORDER BY age DESC;", "desc": "Sort rows." },
    { "label": "Limit", "code": "SELECT * FROM users LIMIT 5;", "desc": "Limit number of rows." },
    { "label": "Offset", "code": "SELECT * FROM users OFFSET 10;", "desc": "Skip first n rows." },
    { "label": "Distinct", "code": "SELECT DISTINCT age FROM users;", "desc": "Get unique values." },
    { "label": "Count rows", "code": "SELECT COUNT(*) FROM users;", "desc": "Count number of rows." },
    { "label": "Sum", "code": "SELECT SUM(age) FROM users;", "desc": "Sum of column." },
    { "label": "Average", "code": "SELECT AVG(age) FROM users;", "desc": "Average value." },
    { "label": "Min / Max", "code": "SELECT MIN(age), MAX(age) FROM users;", "desc": "Minimum and maximum values." },
    { "label": "Group by", "code": "SELECT age, COUNT(*) FROM users GROUP BY age;", "desc": "Group rows and aggregate." },
    { "label": "Having", "code": "SELECT age, COUNT(*) FROM users GROUP BY age HAVING COUNT(*) > 1;", "desc": "Filter groups." },
    { "label": "Inner join", "code": "SELECT u.name, o.amount FROM users u INNER JOIN orders o ON u.id=o.user_id;", "desc": "Join matching rows from two tables." },
    { "label": "Left join", "code": "SELECT u.name, o.amount FROM users u LEFT JOIN orders o ON u.id=o.user_id;", "desc": "All users, orders if exist." },
    { "label": "Right join", "code": "SELECT u.name, o.amount FROM users u RIGHT JOIN orders o ON u.id=o.user_id;", "desc": "All orders, users if exist." },
    { "label": "Full outer join", "code": "SELECT u.name, o.amount FROM users u FULL OUTER JOIN orders o ON u.id=o.user_id;", "desc": "All rows from both tables." },
    { "label": "Union", "code": "SELECT name FROM users1 UNION SELECT name FROM users2;", "desc": "Combine results without duplicates." },
    { "label": "Union all", "code": "SELECT name FROM users1 UNION ALL SELECT name FROM users2;", "desc": "Combine results with duplicates." },
    { "label": "Substring", "code": "SELECT SUBSTRING(name,1,3) FROM users;", "desc": "Extract substring." },
    { "label": "Length", "code": "SELECT LENGTH(name) FROM users;", "desc": "Get string length." },
    { "label": "Upper / Lower", "code": "SELECT UPPER(name), LOWER(name) FROM users;", "desc": "Convert case." },
    { "label": "Now", "code": "SELECT NOW();", "desc": "Current timestamp." },
    { "label": "Date add", "code": "SELECT CURRENT_DATE + INTERVAL '7 days';", "desc": "Add days to date." },
    { "label": "Date diff", "code": "SELECT AGE(NOW(), birth_date) FROM users;", "desc": "Calculate interval." },
    { "label": "Create index", "code": "CREATE INDEX idx_name ON users(name);", "desc": "Add index on column." },
    { "label": "Drop index", "code": "DROP INDEX idx_name;", "desc": "Remove index." },
    { "label": "Transactions", "code": "BEGIN; ... COMMIT;", "desc": "Start and commit transaction." },
    { "label": "Rollback", "code": "ROLLBACK;", "desc": "Undo transaction." },
    { "label": "Prepared statement", "code": "PREPARE stmt(int) AS INSERT INTO users(age) VALUES($1);", "desc": "Define reusable query." },
    { "label": "Execute prepared", "code": "EXECUTE stmt(30);", "desc": "Run prepared statement." },
    { "label": "Functions", "code": "CREATE FUNCTION add(a INT, b INT) RETURNS INT AS $$ BEGIN RETURN a+b; END; $$ LANGUAGE plpgsql;", "desc": "Define custom function." },
    { "label": "Call function", "code": "SELECT add(5,10);", "desc": "Call user-defined function." },
    { "label": "Trigger", "code": "CREATE TRIGGER trg BEFORE INSERT ON users FOR EACH ROW EXECUTE FUNCTION log_insert();", "desc": "Define trigger on table." }
  ]
},
{
  "title": "Redis",
  "items": [
    { "label": "Connect", "code": "redis-cli -h host -p 6379", "desc": "Connect to Redis server." },
    { "label": "Ping", "code": "PING", "desc": "Check server is alive." },
    { "label": "Set key", "code": "SET key value", "desc": "Set string value." },
    { "label": "Get key", "code": "GET key", "desc": "Get string value." },
    { "label": "Delete key", "code": "DEL key", "desc": "Delete key." },
    { "label": "Expire key", "code": "EXPIRE key 60", "desc": "Set TTL in seconds." },
    { "label": "TTL", "code": "TTL key", "desc": "Get remaining time." },
    { "label": "Exists", "code": "EXISTS key", "desc": "Check if key exists." },
    { "label": "Keys pattern", "code": "KEYS user:*", "desc": "List keys matching pattern." },
    { "label": "Rename key", "code": "RENAME oldKey newKey", "desc": "Rename a key." },
    { "label": "String incr", "code": "INCR counter", "desc": "Increment integer value." },
    { "label": "String decr", "code": "DECR counter", "desc": "Decrement integer value." },
    { "label": "Append string", "code": "APPEND key \"more\"", "desc": "Append to existing string." },
    { "label": "Get range", "code": "GETRANGE key 0 4", "desc": "Get substring." },
    { "label": "List push left", "code": "LPUSH mylist a b c", "desc": "Add elements to start of list." },
    { "label": "List push right", "code": "RPUSH mylist a b c", "desc": "Add elements to end of list." },
    { "label": "List pop left", "code": "LPOP mylist", "desc": "Remove first element." },
    { "label": "List pop right", "code": "RPOP mylist", "desc": "Remove last element." },
    { "label": "List range", "code": "LRANGE mylist 0 -1", "desc": "Get all elements." },
    { "label": "Set add", "code": "SADD myset a b c", "desc": "Add members to set." },
    { "label": "Set remove", "code": "SREM myset a", "desc": "Remove member from set." },
    { "label": "Set members", "code": "SMEMBERS myset", "desc": "Get all members." },
    { "label": "Set is member", "code": "SISMEMBER myset a", "desc": "Check if value exists." },
    { "label": "Set union", "code": "SUNION set1 set2", "desc": "Union of sets." },
    { "label": "Set intersection", "code": "SINTER set1 set2", "desc": "Intersection of sets." },
    { "label": "Hash set", "code": "HSET user:1 name Alice age 25", "desc": "Set fields in hash." },
    { "label": "Hash get", "code": "HGET user:1 name", "desc": "Get hash field." },
    { "label": "Hash get all", "code": "HGETALL user:1", "desc": "Get all fields." },
    { "label": "Hash delete", "code": "HDEL user:1 age", "desc": "Delete hash field." },
    { "label": "Sorted set add", "code": "ZADD leaderboard 100 user1 200 user2", "desc": "Add members with score." },
    { "label": "Sorted set range", "code": "ZRANGE leaderboard 0 -1 WITHSCORES", "desc": "Get sorted members." },
    { "label": "Sorted set remove", "code": "ZREM leaderboard user1", "desc": "Remove member from sorted set." },
    { "label": "Transactions multi", "code": "MULTI\nSET a 1\nINCR a\nEXEC", "desc": "Execute multiple commands atomically." },
    { "label": "Watch key", "code": "WATCH key\nMULTI\nSET key 1\nEXEC", "desc": "Optimistic locking." },
    { "label": "Publish", "code": "PUBLISH channel \"message\"", "desc": "Send message to subscribers." },
    { "label": "Subscribe", "code": "SUBSCRIBE channel", "desc": "Listen for messages." },
    { "label": "Eval Lua", "code": "EVAL \"return redis.call('GET', KEYS[1])\" 1 mykey", "desc": "Run Lua script." },
    { "label": "Flush DB", "code": "FLUSHDB", "desc": "Delete all keys in current database." },
    { "label": "Flush all", "code": "FLUSHALL", "desc": "Delete all keys in all databases." }
  ]
},
{
  "title": "Kubernetes",
  "items": [
    { "label": "Cluster info", "code": "kubectl cluster-info", "desc": "Display cluster info." },
    { "label": "Get nodes", "code": "kubectl get nodes", "desc": "List all nodes." },
    { "label": "Describe node", "code": "kubectl describe node <node>", "desc": "Detailed node info." },
    { "label": "Get namespaces", "code": "kubectl get ns", "desc": "List all namespaces." },
    { "label": "Create namespace", "code": "kubectl create ns mynamespace", "desc": "Add new namespace." },
    { "label": "Delete namespace", "code": "kubectl delete ns mynamespace", "desc": "Remove namespace." },
    { "label": "Get pods", "code": "kubectl get pods", "desc": "List all pods in current namespace." },
    { "label": "Get pods in all namespaces", "code": "kubectl get pods -A", "desc": "List pods across namespaces." },
    { "label": "Describe pod", "code": "kubectl describe pod mypod", "desc": "Detailed pod info." },
    { "label": "Create pod", "code": "kubectl run mypod --image=nginx", "desc": "Run pod with specified image." },
    { "label": "Delete pod", "code": "kubectl delete pod mypod", "desc": "Remove pod." },
    { "label": "Get deployments", "code": "kubectl get deploy", "desc": "List deployments." },
    { "label": "Describe deployment", "code": "kubectl describe deploy mydeploy", "desc": "Detailed deployment info." },
    { "label": "Create deployment", "code": "kubectl create deploy mydeploy --image=nginx", "desc": "Run deployment." },
    { "label": "Scale deployment", "code": "kubectl scale deploy mydeploy --replicas=3", "desc": "Increase or decrease replicas." },
    { "label": "Delete deployment", "code": "kubectl delete deploy mydeploy", "desc": "Remove deployment." },
    { "label": "Get services", "code": "kubectl get svc", "desc": "List all services." },
    { "label": "Describe service", "code": "kubectl describe svc myservice", "desc": "Detailed service info." },
    { "label": "Expose deployment", "code": "kubectl expose deploy mydeploy --port=80 --type=NodePort", "desc": "Create service for deployment." },
    { "label": "Logs", "code": "kubectl logs mypod", "desc": "View pod logs." },
    { "label": "Follow logs", "code": "kubectl logs -f mypod", "desc": "Stream pod logs." },
    { "label": "Exec into pod", "code": "kubectl exec -it mypod -- /bin/sh", "desc": "Open shell in pod." },
    { "label": "Apply config", "code": "kubectl apply -f config.yaml", "desc": "Create/update resource from file." },
    { "label": "Delete resource", "code": "kubectl delete -f config.yaml", "desc": "Delete resource from file." },
    { "label": "Get configmaps", "code": "kubectl get configmap", "desc": "List configmaps." },
    { "label": "Describe configmap", "code": "kubectl describe configmap myconfig", "desc": "Show configmap details." },
    { "label": "Get secrets", "code": "kubectl get secret", "desc": "List secrets." },
    { "label": "Describe secret", "code": "kubectl describe secret mysecret", "desc": "Show secret details." },
    { "label": "Rollout status", "code": "kubectl rollout status deploy mydeploy", "desc": "Check rollout progress." },
    { "label": "Rollback deployment", "code": "kubectl rollout undo deploy mydeploy", "desc": "Revert to previous version." },
    { "label": "Get events", "code": "kubectl get events", "desc": "List cluster events." },
    { "label": "Top nodes", "code": "kubectl top nodes", "desc": "Show node CPU/memory usage." },
    { "label": "Top pods", "code": "kubectl top pods", "desc": "Show pod CPU/memory usage." },
    { "label": "Port forward", "code": "kubectl port-forward pod/mypod 8080:80", "desc": "Forward local port to pod." },
    { "label": "Edit resource", "code": "kubectl edit deploy mydeploy", "desc": "Edit resource live." },
    { "label": "Label resource", "code": "kubectl label pod mypod env=prod", "desc": "Add label to resource." },
    { "label": "Annotate resource", "code": "kubectl annotate pod mypod description='web app'", "desc": "Add annotation to resource." },
    { "label": "Get all resources", "code": "kubectl get all", "desc": "List all resource types in namespace." },
    { "label": "Diff config", "code": "kubectl diff -f config.yaml", "desc": "Show differences with live cluster." }
  ]
}

  ]